package controllers

import (
	"encoding/json"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"
	"fmt"
	"math/rand"
	"net/http"
	"strings"
	"sync"
	"time"

	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
)

// ‚úÖ Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Controller
type ProductController struct {
	DB                *gorm.DB
	BlockchainService *services.BlockchainService
	IPFSService       *services.IPFSService
	Mutex             sync.Mutex
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Constructor
func NewProductController(
	db *gorm.DB,
	blockchainService *services.BlockchainService,
	ipfsService *services.IPFSService,
) *ProductController {
	return &ProductController{
		DB:                db,
		BlockchainService: blockchainService,
		IPFSService:       ipfsService,
		Mutex:             sync.Mutex{},
	}
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Category Code ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
func (pc *ProductController) getOrCreateCategory(categoryName string) (uint, error) {
	pc.Mutex.Lock()
	defer pc.Mutex.Unlock()

	var category models.Category
	err := pc.DB.Where("name = ?", categoryName).First(&category).Error
	if err != nil {
		// ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Category ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
		if err == gorm.ErrRecordNotFound {
			newCategory := models.Category{Name: categoryName}
			if err := pc.DB.Create(&newCategory).Error; err != nil {
				return 0, err
			}
			fmt.Println("‚úÖ Created New Category:", newCategory.CategoryID)
			return newCategory.CategoryID, nil
		}
		return 0, err
	}

	return category.CategoryID, nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô Base36
func toBase36(n int) string {
	const base36 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	if n < 36 {
		return string(base36[n])
	}
	return toBase36(n/36) + string(base36[n%36])
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Product ID
func (pc *ProductController) generateProductID(factoryID string, categoryID uint) string {
	// ‚úÖ ‡πÉ‡∏ä‡πâ 3 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Factory ID
	shortFactoryID := factoryID[len(factoryID)-3:] // ‡πÄ‡∏ä‡πà‡∏ô "FAC2500005" ‚Üí "005"

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Category ID ‡πÄ‡∏õ‡πá‡∏ô Base36
	categoryBase36 := toBase36(int(categoryID)) // ‡πÄ‡∏ä‡πà‡∏ô "12" ‚Üí "C"

	// ‚úÖ ‡πÉ‡∏ä‡πâ Timestamp YYMMDD + ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏∏‡πà‡∏° 2 ‡∏ï‡∏±‡∏ß
	timestamp := time.Now().Format("060102") // YYMMDD
	randomCode := rand.Intn(36)              // Base36 (0-9, A-Z)
	randomBase36 := toBase36(randomCode)     // ‡πÄ‡∏ä‡πà‡∏ô "X"

	// ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô Product ID
	return fmt.Sprintf("%s%s-%s%s", shortFactoryID, categoryBase36, timestamp, randomBase36)
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
func (pc *ProductController) CreateProduct(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Create Product")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)
	factoryID := c.Locals("entityID").(string)          // ‚úÖ ‡πÉ‡∏ä‡πâ Factory ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Product ID
	walletAddress := c.Locals("walletAddress").(string) // ‚úÖ ‡πÉ‡∏ä‡πâ Wallet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blockchain

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Factory ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ)
	if role != "factory" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only factories can create products"})
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	var request struct {
		GeneralInfo struct {
			ProdName    string `json:"prodName"`
			Category    string `json:"category"`
			Description string `json:"description"`
			Quantity    string `json:"quantity"`
		} `json:"GeneralInfo"`
		Nutrition json.RawMessage `json:"Nutrition"` // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô Raw JSON
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
	if err := json.Unmarshal(c.Body(), &request); err != nil {
		fmt.Println("‚ùå Error parsing request body:", err)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Category ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if strings.TrimSpace(request.GeneralInfo.Category) == "" {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Category cannot be empty"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Category ID
	categoryID, err := pc.getOrCreateCategory(request.GeneralInfo.Category)
	if err != nil {
		fmt.Println("‚ùå Failed to create/find category:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to process category"})
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ Factory ID + Category ID ‡∏™‡∏£‡πâ‡∏≤‡∏á `Product ID`
	productID := pc.generateProductID(factoryID, categoryID)

	// ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (GeneralInfo + Nutrition) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IPFS
	productMetadata := map[string]interface{}{
		"prodName":    request.GeneralInfo.ProdName,
		"category":    request.GeneralInfo.Category,
		"description": request.GeneralInfo.Description,
		"quantity":    request.GeneralInfo.Quantity,
		"nutrition":   json.RawMessage(request.Nutrition),
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ IPFS
	productCID, err := pc.IPFSService.UploadDataToIPFS(productMetadata)
	if err != nil {
		fmt.Println("‚ùå Failed to upload product data to IPFS:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload product data"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Blockchain
	txHash, err := pc.BlockchainService.CreateProduct(
		walletAddress, // ‚úÖ ‡πÉ‡∏ä‡πâ Wallet Address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blockchain
		productID,     // ‚úÖ ‡πÉ‡∏ä‡πâ Factory ID + Category ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Product ID
		request.GeneralInfo.ProdName,
		productCID,
		request.GeneralInfo.Category, // ‚úÖ ‡∏™‡πà‡∏á Category ‡πÄ‡∏Ç‡πâ‡∏≤ Blockchain
	)
	if err != nil {
		fmt.Println("‚ùå Blockchain transaction failed:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain transaction failed"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
	return c.Status(http.StatusCreated).JSON(fiber.Map{
		"message":   "Product created successfully",
		"productId": productID, // ‚úÖ ‡πÉ‡∏ä‡πâ Factory ID ‡∏™‡∏£‡πâ‡∏≤‡∏á Product ID
		"txHash":    txHash,
		"ipfsCID":   productCID,
		"category":  request.GeneralInfo.Category, // ‚úÖ ‡∏™‡πà‡∏á Category ‡πÉ‡∏ô Response ‡∏î‡πâ‡∏ß‡∏¢
	})
}

func (pc *ProductController) GetFactoryProducts(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Factory Products")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Factory ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	if role != "factory" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only factories can view products"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á `entityID` ‡∏à‡∏≤‡∏Å JWT Token ‡∏ó‡∏µ‡πà AuthMiddleware ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
	factoryID, ok := c.Locals("entityID").(string)
	if !ok || factoryID == "" {
		fmt.Println("‚ùå Factory ID is missing in Context")
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - Factory ID is missing"})
	}
	fmt.Println("‚úÖ Factory ID from Context:", factoryID)

	// ‚úÖ ‡∏î‡∏∂‡∏á Wallet Address ‡∏à‡∏≤‡∏Å JWT Token
	walletAddress, ok := c.Locals("walletAddress").(string)
	if !ok || walletAddress == "" {
		fmt.Println("‚ùå Wallet Address is missing in Context")
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - Wallet Address is missing"})
	}
	fmt.Println("‚úÖ Wallet Address from Context:", walletAddress)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search Query)
	searchQuery := strings.ToLower(c.Query("search", ""))

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Blockchain (‡πÉ‡∏ä‡πâ Wallet Address ‡πÅ‡∏ó‡∏ô Factory ID)
	products, err := pc.BlockchainService.GetProductsByFactory(walletAddress)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch factory products:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch factory products"})
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Search Query
	var filteredProducts []map[string]interface{}
	for _, product := range products {
		productId := product["productId"].(string)
		productName := product["productName"].(string)
		category := product["category"].(string)

		if searchQuery == "" ||
			strings.Contains(strings.ToLower(productId), searchQuery) ||
			strings.Contains(strings.ToLower(productName), searchQuery) ||
			strings.Contains(strings.ToLower(category), searchQuery) {

			filteredProducts = append(filteredProducts, map[string]interface{}{
				"productId":   strings.TrimRight(productId, "\x00"),
				"productName": productName,
				"category":    category,
				"detailsLink": fmt.Sprintf("/Factory/ProductDetails/%s", productId),
			})
		}
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
	return c.Status(http.StatusOK).JSON(fiber.Map{
		"displayedProducts": filteredProducts,
	})
}

func (pc *ProductController) GetProductDetails(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Product Details")

	// ‚úÖ ‡∏î‡∏∂‡∏á `productId` ‡∏à‡∏≤‡∏Å URL Parameter
	productID := c.Params("productId")
	if productID == "" {
		fmt.Println("‚ùå Product ID is missing")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Product ID is required"})
	}
	fmt.Println("‚úÖ Product ID:", productID)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡∏à‡∏≤‡∏Å Smart Contract
	productData, err := pc.BlockchainService.GetProductDetails(productID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product from blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product details"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å IPFS
	ipfsData, err := pc.IPFSService.GetJSONFromIPFS(productData["productCID"].(string))
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product data from IPFS:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product data"})
	}

	// ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Response ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Frontend
	response := fiber.Map{
		"GeneralInfo": fiber.Map{
			"productName": productData["productName"],
			"category":    productData["category"],
			"description": ipfsData["description"],
			"quantity":    ipfsData["quantity"],
		},
		"Nutrition": ipfsData["nutrition"], // ‚úÖ ‡∏î‡∏∂‡∏á Nutrition ‡∏à‡∏≤‡∏Å IPFS
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Frontend
	return c.Status(http.StatusOK).JSON(response)
}
