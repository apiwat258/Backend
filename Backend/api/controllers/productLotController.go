package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"

	"finalyearproject/Backend/database"
	"finalyearproject/Backend/services"
)

// ‚úÖ ProductLotController ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
type ProductLotController struct {
	DB                *gorm.DB
	IPFSService       *services.IPFSService
	BlockchainService *services.BlockchainService
}

func NewProductLotController(db *gorm.DB, blockchainService *services.BlockchainService, ipfsService *services.IPFSService) *ProductLotController {
	return &ProductLotController{
		DB:                db,
		BlockchainService: blockchainService,
		IPFSService:       ipfsService,
	}
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Product Lot
func (plc *ProductLotController) CreateProductLot(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Create Product Lot")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)
	factoryID := c.Locals("entityID").(string)
	walletAddress := c.Locals("walletAddress").(string)
	userID := c.Locals("userID").(string) // ‚úÖ ‡πÉ‡∏ä‡πâ userID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏î‡∏∂‡∏á Inspector Name

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Factory ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	if role != "factory" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only factories can create product lots"})
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	var request struct {
		ProductID   string          `json:"productId"`
		Grade       bool            `json:"grade"`
		MilkTankIDs []string        `json:"milkTankIds"`
		QualityData json.RawMessage `json:"qualityData"` // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö JSON
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON
	if err := json.Unmarshal(c.Body(), &request); err != nil {
		fmt.Println("‚ùå Error parsing request body:", err)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Product ID ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
	if strings.TrimSpace(request.ProductID) == "" {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Product ID is required"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Milk Tank ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
	if len(request.MilkTankIDs) == 0 {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "At least one Milk Tank must be selected"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Inspector Name ‡∏à‡∏≤‡∏Å Database ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ User ID
	var inspectorName string
	err := database.DB.Table("users").Where("userid = ?", userID).Select("username").Scan(&inspectorName).Error
	if err != nil || inspectorName == "" {
		fmt.Println("‚ùå Failed to find inspector name:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to retrieve inspector name"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `lotId`
	lotId := plc.generateLotID(factoryID)

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î `Quality & Nutrition` ‡πÑ‡∏õ‡∏ó‡∏µ‡πà IPFS
	qualityCID, err := plc.IPFSService.UploadDataToIPFS(map[string]interface{}{
		"qualityData": json.RawMessage(request.QualityData),
	})
	if err != nil {
		fmt.Println("‚ùå Failed to upload quality data to IPFS:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload quality data"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Blockchain
	txHash, err := plc.BlockchainService.CreateProductLot(
		walletAddress,
		lotId,
		request.ProductID,
		inspectorName,
		request.Grade,
		qualityCID,
		request.MilkTankIDs,
	)
	if err != nil {
		fmt.Println("‚ùå Blockchain transaction failed:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain transaction failed"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
	return c.Status(http.StatusCreated).JSON(fiber.Map{
		"message":   "Product Lot created successfully",
		"lotId":     lotId,
		"txHash":    txHash,
		"ipfsCID":   qualityCID,
		"inspector": inspectorName,
	})
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Lot ID (‡πÉ‡∏ä‡πâ Factory ID)
func (plc *ProductLotController) generateLotID(factoryID string) string {
	return fmt.Sprintf("LOT-%s-%d", factoryID, time.Now().Unix())
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot Details
func (pc *ProductLotController) GetProductLotDetails(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Product Lot Details")

	// ‚úÖ ‡∏î‡∏∂‡∏á `lotId` ‡∏à‡∏≤‡∏Å URL Parameter
	lotID := c.Params("lotId")
	if lotID == "" {
		fmt.Println("‚ùå Product Lot ID is missing")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Product Lot ID is required"})
	}
	fmt.Println("‚úÖ Product Lot ID:", lotID)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot ‡∏à‡∏≤‡∏Å Blockchain
	productLotData, err := pc.BlockchainService.GetProductLotByLotID(lotID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product lot from blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product lot details"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡∏à‡∏≤‡∏Å Smart Contract
	productID := productLotData.ProductID
	productData, err := pc.BlockchainService.GetProductDetails(productID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product from blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product details"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å IPFS ‡∏Ç‡∏≠‡∏á Product (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ quantityUnit)
	productIPFSCID := productData["productCID"].(string)
	productIPFSData, err := pc.IPFSService.GetJSONFromIPFS(productIPFSCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product data from IPFS:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product data"})
	}

	// ‚úÖ Debug Log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `productIPFSData` ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏á
	fmt.Println("üìå Debug: productIPFSData =", productIPFSData)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Nutrition ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	NutritionData, ok := productIPFSData["nutrition"].(map[string]interface{})
	if !ok {
		fmt.Println("‚ùå Error: Nutrition data is missing or incorrect")
		fmt.Println("üìå Debug: Available keys in productIPFSData:", reflect.ValueOf(productIPFSData).MapKeys()) // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ key ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Nutrition data structure is incorrect"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å IPFS ‡∏Ç‡∏≠‡∏á Product Lot (Quality & Nutrition)
	ipfsCID := productLotData.QualityAndNutritionCID
	ipfsData, err := pc.IPFSService.GetJSONFromIPFS(ipfsCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch quality & nutrition data from IPFS:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch quality & nutrition data"})
	}

	// ‚úÖ Debug Log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `ipfsData` ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏á
	fmt.Println("üìå Debug: ipfsData =", ipfsData)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ qualityData ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	qualityDataMap, ok := ipfsData["qualityData"].(map[string]interface{})
	if !ok {
		fmt.Println("‚ùå Error: qualityData is missing or incorrect")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "qualityData structure is incorrect"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quality
	qualityData, ok := qualityDataMap["quality"].(map[string]interface{})
	if !ok {
		fmt.Println("‚ùå Error: Quality data is missing or incorrect")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Quality data structure is incorrect"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• nutrition (‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å := ‡πÄ‡∏õ‡πá‡∏ô =)
	nutritionData, ok := qualityDataMap["nutrition"].(map[string]interface{})
	if !ok {
		fmt.Println("‚ùå Error: Nutrition data is missing or incorrect")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Nutrition data structure is incorrect"})
	}
	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `grade` ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	var gradeText string
	if productLotData.Grade {
		gradeText = "Passed"
	} else {
		gradeText = "Failed"
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `inspectionDate` ‡πÄ‡∏õ‡πá‡∏ô `YYYY-MM-DD HH:mm:ss`
	inspectionTime := time.Unix(productLotData.InspectionDate.Unix(), 0).Format("2006-01-02 15:04:05")

	// ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Frontend
	response := fiber.Map{
		"GeneralInfo": fiber.Map{
			"productId":    productID,
			"productName":  productData["productName"],
			"category":     productData["category"],
			"description":  productIPFSData["description"],
			"quantity":     productIPFSData["quantity"],
			"quantityUnit": NutritionData["quantityUnit"], // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å IPFS ‡∏Ç‡∏≠‡∏á Product
		},
		"selectMilkTank": fiber.Map{
			"tankIds":         productLotData.MilkTankIDs,
			"temp":            qualityData["temp"],
			"tempUnit":        qualityData["tempUnit"],
			"pH":              qualityData["pH"],
			"fat":             qualityData["fat"],
			"protein":         qualityData["protein"],
			"bacteria":        qualityData["bacteria"],
			"bacteriaInfo":    qualityData["bacteriaInfo"],
			"contaminants":    qualityData["contaminants"],
			"contaminantInfo": qualityData["contaminantInfo"],
			"abnormalChar":    qualityData["abnormalChar"],
			"abnormalType":    qualityData["abnormalType"],
		},
		"Quality": fiber.Map{
			"grade":          gradeText,
			"inspectionDate": inspectionTime, // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Timestamp
			"inspector":      productLotData.Inspector,
		},
		"nutrition": nutritionData, // ‚úÖ ‡πÉ‡∏ä‡πâ nutritionData ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Frontend
	return c.Status(http.StatusOK).JSON(response)

}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Product Lots ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
func (plc *ProductLotController) GetFactoryProductLots(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Factory Product Lots")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)
	factoryWallet := c.Locals("walletAddress").(string)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Factory ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	if role != "factory" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only factories can view product lots"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search Query)
	searchQuery := strings.ToLower(c.Query("search", ""))

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lots ‡∏à‡∏≤‡∏Å Blockchain (‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÄ‡∏•‡∏¢)
	productLots, err := plc.BlockchainService.GetProductLotsByFactory(factoryWallet)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product lots:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch product lots"})
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Search Query
	var filteredProductLots []map[string]interface{}
	for _, lot := range productLots {
		lotID := lot["Product Lot No"]
		productName := lot["Product Name"]
		personInCharge := lot["Person In Charge"]

		// ‚úÖ ‡∏ñ‡πâ‡∏≤ searchQuery ‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° Lot ID ‡∏´‡∏£‡∏∑‡∏≠ Product Name
		if searchQuery == "" || strings.Contains(strings.ToLower(lotID), searchQuery) || strings.Contains(strings.ToLower(productName), searchQuery) {
			filteredProductLots = append(filteredProductLots, map[string]interface{}{
				"productLotNo":   lotID,
				"productName":    productName,
				"personInCharge": personInCharge,
				"moreInfoLink":   fmt.Sprintf("/Factory/ProductLot/Details?id=%s", lotID),
			})
		}
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend
	return c.Status(http.StatusOK).JSON(fiber.Map{
		"displayedProductLots": filteredProductLots,
		"addNewLotLink":        "/Factory/CreateProductLot",
	})
}
