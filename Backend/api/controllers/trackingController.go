package controllers

import (
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services" // üìå ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ package ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
	"fmt"
	"strings"
	"sync"
	"time"

	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
)

// ‚úÖ TrackingController Struct (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö `ProductLotController`)
type TrackingController struct {
	DB                *gorm.DB
	BlockchainService *services.BlockchainService
	IPFSService       *services.IPFSService
	QRService         *services.QRCodeService
}

// ‚úÖ NewTrackingController - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Controller
func NewTrackingController(db *gorm.DB, blockchainService *services.BlockchainService, ipfsService *services.IPFSService, qrService *services.QRCodeService) *TrackingController {
	return &TrackingController{
		DB:                db,
		BlockchainService: blockchainService,
		IPFSService:       ipfsService,
		QRService:         qrService,
	}
}

func (tc *TrackingController) GetTrackingDetailsByLot(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Full Tracking Details by ProductLotId")

	// ‚úÖ ‡∏£‡∏±‡∏ö Product Lot ID ‡∏à‡∏≤‡∏Å Query Parameter
	productLotId := c.Query("productLotId")
	if productLotId == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Product Lot ID is required"})
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ Goroutines + WaitGroup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Latency
	var wg sync.WaitGroup
	var response sync.Map
	var errorList []string

	// ‚úÖ Helper Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ Role
	// üìå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á `fiber.Map` ‡πÅ‡∏•‡∏∞ `[]fiber.Map`
	fetchTrackingData := func(role string, fetchFunc func(string) (interface{}, error)) {
		defer wg.Done()
		data, err := fetchFunc(productLotId)
		if err != nil {
			fmt.Printf("‚ùå Failed to fetch %s data: %v\n", role, err)
			errorList = append(errorList, fmt.Sprintf("%s: %v", role, err))
		} else if data != nil {
			response.Store(role, data)
		}
	}

	wg.Add(4)

	// ‚úÖ Logistics
	go fetchTrackingData("logistics", func(id string) (interface{}, error) {
		return tc.GetLogisticsTrackingDataByLot(id)
	})

	// ‚úÖ Retailer
	go fetchTrackingData("retailer", func(id string) (interface{}, error) {
		return tc.GetRetailerTrackingDataByLot(id)
	})

	// ‚úÖ Factory
	go fetchTrackingData("factory", func(id string) (interface{}, error) {
		return tc.GetFactoryTrackingDataByLot(id)
	})

	// ‚úÖ Farm
	go fetchTrackingData("farm", func(id string) (interface{}, error) {
		return tc.GetFarmTrackingDataByLot(id)
	})

	wg.Wait()

	// ‚úÖ ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	finalResponse := fiber.Map{}
	response.Range(func(key, value interface{}) bool {
		finalResponse[key.(string)] = value
		return true
	})

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error
	if len(errorList) > 0 {
		finalResponse["errors"] = errorList
		fmt.Println("‚ö†Ô∏è Some data could not be fetched:", errorList)
	}

	return c.Status(fiber.StatusOK).JSON(finalResponse)
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢ (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
func (tc *TrackingController) GetRetailerTrackingData(trackingId string) (fiber.Map, error) {
	fmt.Println("üìå Fetching Retailer Tracking Data for Tracking ID:", trackingId)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Retailer Confirmation ‡∏à‡∏≤‡∏Å Blockchain
	retailerData, err := tc.BlockchainService.GetRetailerConfirmation(trackingId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch retailer confirmation:", err)
		return nil, fmt.Errorf("Failed to fetch retailer confirmation")
	}

	retailerID, ok := retailerData["retailerId"].(string)
	if !ok || retailerID == "" {
		return nil, fmt.Errorf("Invalid retailer ID")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database (‡∏ï‡∏≤‡∏£‡∏≤‡∏á `retailer`)
	var retailer models.Retailer
	err = tc.DB.Where("retailerid = ?", retailerID).First(&retailer).Error
	if err != nil {
		fmt.Println("‚ùå Failed to fetch retailer general info:", err)
		return nil, fmt.Errorf("Failed to fetch retailer general info")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IPFS ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Quality CID
	qualityCID, ok := retailerData["qualityCID"].(string)
	if !ok || qualityCID == "" {
		return nil, fmt.Errorf("Invalid or missing qualityCID")
	}

	qualityData, err := tc.IPFSService.GetJSONFromIPFS(qualityCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch quality report from IPFS:", err)
		return nil, fmt.Errorf("Failed to retrieve quality data from IPFS")
	}

	fmt.Println("üìå Debug - Quality Data from IPFS:", qualityData)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á `recipientInfo`
	recipientInfo, _ := qualityData["recipientInfo"].(map[string]interface{})

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `Quantity`
	quantity, _ := qualityData["quantity"].(float64)
	quantityUnit, _ := qualityData["quantityUnit"].(string)
	temp, _ := qualityData["temperature"].(float64)
	tempUnit, _ := qualityData["tempUnit"].(string)
	pH, _ := qualityData["pH"].(float64)
	fat, _ := qualityData["fat"].(float64)
	protein, _ := qualityData["protein"].(float64)
	bacteria, _ := qualityData["bacteria"].(bool)
	bacteriaInfo, _ := qualityData["bacteriaInfo"].(string)
	contaminants, _ := qualityData["contaminants"].(bool)
	contaminantInfo, _ := qualityData["contaminantInfo"].(string)
	abnormalChar, _ := qualityData["abnormalChar"].(bool)
	abnormalType, _ := qualityData["abnormalType"].(map[string]interface{})

	// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô `nil`
	if abnormalType == nil {
		abnormalType = map[string]interface{}{}
	}

	// ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	response := fiber.Map{
		"generalInfo": fiber.Map{ // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á Retailer ‡∏à‡∏≤‡∏Å Database
			"retailerName": retailer.CompanyName,
			"address":      retailer.Address,
			"contact":      retailer.Telephone,
		},
		"receivedProduct": fiber.Map{ // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Retailer ‡∏à‡∏≤‡∏Å Blockchain & IPFS
			"trackingId": trackingId,
			"recipientInfo": fiber.Map{
				"personInCharge": recipientInfo["personInCharge"],
				"location":       recipientInfo["location"],
				"pickUpTime":     recipientInfo["pickUpTime"],
			},
			"quantity": fiber.Map{
				"value":           quantity,
				"unit":            quantityUnit,
				"temperature":     temp,
				"tempUnit":        tempUnit,
				"pH":              pH,
				"fat":             fat,
				"protein":         protein,
				"bacteria":        bacteria,
				"bacteriaInfo":    bacteriaInfo,
				"contaminants":    contaminants,
				"contaminantInfo": contaminantInfo,
				"abnormalChar":    abnormalChar,
				"abnormalType":    abnormalType,
			},
		},
	}

	// ‚úÖ ‡∏™‡πà‡∏á JSON ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
	return response, nil
}

func (tc *TrackingController) GetLogisticsTrackingData(trackingId string) (fiber.Map, error) {
	fmt.Println("üìå Fetching Logistics Tracking Data for Tracking ID:", trackingId)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Smart Contract ‡∏ú‡πà‡∏≤‡∏ô BlockchainService
	beforeCheckpoints, duringCheckpoints, afterCheckpoints, err := tc.BlockchainService.GetLogisticsCheckpointsByTrackingId(trackingId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch logistics checkpoints:", err)
		return nil, fmt.Errorf("Failed to fetch logistics checkpoints")
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ `map[string]bool` ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ **‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**
	uniqueCheckpoints := make(map[string]bool)

	// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô **‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**
	filterUniqueCheckpoints := func(checkpoints []services.LogisticsCheckpoint, checkType string) []map[string]interface{} {
		var filteredCheckpoints []map[string]interface{}

		for _, cp := range checkpoints {
			// ‚úÖ ‡πÉ‡∏ä‡πâ `CheckType` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å Before / During / After
			key := fmt.Sprintf("%s-%d-%d-%d", cp.TrackingId, cp.CheckType, cp.PickupTime, cp.DeliveryTime)

			// ‚úÖ ‡∏ñ‡πâ‡∏≤ Key ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ Duplicate ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
			if uniqueCheckpoints[key] {
				continue
			}
			uniqueCheckpoints[key] = true

			// ‚úÖ ‡∏î‡∏∂‡∏á Receiver Info ‡∏à‡∏≤‡∏Å IPFS
			fmt.Println("üì° Fetching Receiver Info from IPFS CID:", cp.ReceiverCID)
			ipfsData, err := tc.IPFSService.GetJSONFromIPFS(cp.ReceiverCID)
			if err != nil {
				fmt.Println("‚ö†Ô∏è Warning: Failed to fetch receiver info from IPFS:", err)
				continue
			}

			// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReceiverInfo
			receiverInfo := map[string]interface{}{
				"companyName": getStringFromMap(ipfsData, "companyName"),
				"firstName":   getStringFromMap(ipfsData, "firstName"),
				"lastName":    getStringFromMap(ipfsData, "lastName"),
				"email":       getStringFromMap(ipfsData, "email"),
				"phone":       getStringFromMap(ipfsData, "phone"),
				"address":     getStringFromMap(ipfsData, "address"),
				"province":    getStringFromMap(ipfsData, "province"),
				"district":    getStringFromMap(ipfsData, "district"),
				"subDistrict": getStringFromMap(ipfsData, "subDistrict"),
				"postalCode":  getStringFromMap(ipfsData, "postalCode"),
				"location":    getStringFromMap(ipfsData, "location"),
			}

			// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Array ‡πÉ‡∏´‡∏°‡πà
			filteredCheckpoints = append(filteredCheckpoints, map[string]interface{}{
				"trackingId":        cp.TrackingId,
				"logisticsProvider": cp.LogisticsProvider,
				"pickupTime":        cp.PickupTime,
				"deliveryTime":      cp.DeliveryTime,
				"quantity":          cp.Quantity,
				"temperature":       cp.Temperature,
				"personInCharge":    cp.PersonInCharge,
				"checkType":         cp.CheckType,
				"receiverCID":       cp.ReceiverCID,
				"receiverInfo":      receiverInfo, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IPFS
			})
		}

		return filteredCheckpoints
	}

	// ‚úÖ Response JSON
	response := fiber.Map{
		"trackingId":        trackingId,
		"beforeCheckpoints": filterUniqueCheckpoints(beforeCheckpoints, "before"),
		"duringCheckpoints": filterUniqueCheckpoints(duringCheckpoints, "during"),
		"afterCheckpoints":  filterUniqueCheckpoints(afterCheckpoints, "after"),
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà `GetTrackingDetails`
	return response, nil
}

// GetFarmTrackingData - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tracking ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°

func (tc *TrackingController) GetFarmTrackingDataByLot(productLotId string) (fiber.Map, error) {
	fmt.Println("üìå Fetching Farm Tracking Data for ProductLotId:", productLotId)

	// ‚úÖ 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Product Lot ‡∏à‡∏≤‡∏Å Blockchain ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ productLotId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
	productLotData, err := tc.BlockchainService.GetProductLotByLotID(productLotId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch Product Lot details:", err)
		return nil, err
	}

	// ‚úÖ 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Product Lot ‡∏°‡∏µ Milk Tank IDs ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if len(productLotData.MilkTankIDs) == 0 {
		fmt.Println("‚ö†Ô∏è No Milk Tanks found for this Product Lot")
		return fiber.Map{"farms": []fiber.Map{}}, nil
	}

	// ‚úÖ 3Ô∏è‚É£ ‡πÉ‡∏ä‡πâ map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å Milk Tank ‡∏ï‡∏≤‡∏° `farmID`
	farmMilkTanks := make(map[string][]string)
	for _, tankID := range productLotData.MilkTankIDs {
		parts := strings.Split(tankID, "-")
		if len(parts) < 2 {
			fmt.Println("‚ö†Ô∏è Invalid Milk Tank ID format:", tankID)
			continue
		}
		farmID := parts[0] // ‚úÖ ‡∏î‡∏∂‡∏á `farmID` ‡∏à‡∏≤‡∏Å Tank ID
		farmMilkTanks[farmID] = append(farmMilkTanks[farmID], tankID)
	}

	// ‚úÖ 4Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å Database
	var farms []fiber.Map
	for farmID, tankIDs := range farmMilkTanks {
		var farm models.Farmer
		err := tc.DB.Where("farmerid = ?", farmID).First(&farm).Error
		if err != nil {
			fmt.Println("‚ùå Failed to fetch farm details for:", farmID, "Error:", err)
			continue
		}

		// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
		farms = append(farms, fiber.Map{
			"farmID":       farm.FarmerID,
			"companyName":  farm.CompanyName,
			"address":      farm.Address,
			"subDistrict":  farm.SubDistrict,
			"district":     farm.District,
			"province":     farm.Province,
			"country":      farm.Country,
			"postCode":     farm.PostCode,
			"telephone":    farm.Telephone,
			"email":        farm.Email,
			"locationLink": farm.LocationLink,
			"milkTankIDs":  tankIDs, // ‚úÖ ‡πÅ‡∏ó‡πâ‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏≤‡∏£‡πå‡∏°
		})
	}

	// ‚úÖ 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Response
	response := fiber.Map{
		"farms": farms,
	}

	fmt.Println("‚úÖ Farm Tracking Data fetched successfully")
	return response, nil
}

func (tc *TrackingController) GetFactoryTrackingDataByLot(productLotId string) (fiber.Map, error) {
	fmt.Println("üìå Fetching Factory Tracking Data for ProductLotId:", productLotId)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot ‡∏à‡∏≤‡∏Å Blockchain ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ productLotId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
	productLotData, err := tc.BlockchainService.GetProductLotByLotID(productLotId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product lot from blockchain:", err)
		return nil, fmt.Errorf("Failed to fetch product lot details")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡∏à‡∏≤‡∏Å Smart Contract
	productID := productLotData.ProductID
	productData, err := tc.BlockchainService.GetProductDetails(productID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product from blockchain:", err)
		return nil, fmt.Errorf("Failed to fetch product details")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á QR Code ‚Üí Tracking ID & Factory Info
	_, _, qrCodeCIDs, err := tc.BlockchainService.GetTrackingByLotId(productLotId)
	if err != nil || len(qrCodeCIDs) == 0 {
		fmt.Println("‚ùå Failed to fetch QR Code from blockchain:", err)
		return nil, fmt.Errorf("Failed to fetch QR Code")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á QR Code Data ‡∏à‡∏≤‡∏Å IPFS (‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏û‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
	qrCodeData, err := tc.QRService.ReadQRCodeFromCID(qrCodeCIDs[0])
	if err != nil {
		fmt.Println("‚ùå Failed to decode QR Code from CID:", qrCodeCIDs[0])
		return nil, fmt.Errorf("Failed to decode QR Code")
	}
	fmt.Println("üìå QR Code Data:", qrCodeData)

	factoryMap, ok := qrCodeData["factory"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Factory data structure is incorrect")
	}

	factoryID, ok := factoryMap["factoryId"].(string)
	if !ok || factoryID == "" {
		return nil, fmt.Errorf("FactoryID is missing in QR Code Data")
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å PostgreSQL
	var factory models.Factory
	if err := tc.DB.Where("factoryid = ?", factoryID).First(&factory).Error; err != nil {
		fmt.Println("‚ùå Failed to fetch factory details:", err)
		return nil, fmt.Errorf("Failed to fetch factory details")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å IPFS ‡∏Ç‡∏≠‡∏á Product
	productIPFSCID := productData["productCID"].(string)
	productIPFSData, err := tc.IPFSService.GetJSONFromIPFS(productIPFSCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product data from IPFS:", err)
		return nil, fmt.Errorf("Failed to fetch product data")
	}

	nutritionData, ok := productIPFSData["nutrition"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Nutrition data structure is incorrect")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Quality & Nutrition CID ‡∏à‡∏≤‡∏Å ProductLot
	ipfsCID := productLotData.QualityAndNutritionCID
	ipfsData, err := tc.IPFSService.GetJSONFromIPFS(ipfsCID)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch quality & nutrition data")
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ qualityData ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	qualityDataMap, ok := ipfsData["qualityData"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("qualityData structure is incorrect")
	}

	qualityData, ok := qualityDataMap["quality"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Quality data structure is incorrect")
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏£‡∏î
	var gradeText string
	if productLotData.Grade {
		gradeText = "Passed"
	} else {
		gradeText = "Failed"
	}

	inspectionTime := time.Unix(productLotData.InspectionDate.Unix(), 0).Format("2006-01-02 15:04:05")

	// ‚úÖ Final JSON Response
	response := fiber.Map{
		"GeneralInfo": fiber.Map{
			"productId":    productID,
			"productName":  productData["productName"],
			"category":     productData["category"],
			"description":  productIPFSData["description"],
			"quantity":     productIPFSData["quantity"],
			"quantityUnit": nutritionData["quantityUnit"],
		},
		"selectMilkTank": fiber.Map{
			"temp":            qualityData["temp"],
			"tempUnit":        qualityData["tempUnit"],
			"pH":              qualityData["pH"],
			"fat":             qualityData["fat"],
			"protein":         qualityData["protein"],
			"bacteria":        qualityData["bacteria"],
			"bacteriaInfo":    qualityData["bacteriaInfo"],
			"contaminants":    qualityData["contaminants"],
			"contaminantInfo": qualityData["contaminantInfo"],
			"abnormalChar":    qualityData["abnormalChar"],
			"abnormalType":    qualityData["abnormalType"],
		},
		"Quality": fiber.Map{
			"grade":          gradeText,
			"inspectionDate": inspectionTime,
			"inspector":      productLotData.Inspector,
		},
		"nutrition": nutritionData,
		"factoryInfo": fiber.Map{
			"factoryID":     factory.FactoryID,
			"companyName":   factory.CompanyName,
			"address":       factory.Address,
			"district":      factory.District,
			"subDistrict":   factory.SubDistrict,
			"province":      factory.Province,
			"country":       factory.Country,
			"postCode":      factory.PostCode,
			"telephone":     factory.Telephone,
			"email":         factory.Email,
			"lineID":        factory.LineID.String,
			"facebook":      factory.Facebook.String,
			"locationLink":  factory.LocationLink.String,
			"createdOn":     factory.CreatedOn.Format("2006-01-02 15:04:05"),
			"walletAddress": factory.WalletAddress,
		},
	}

	return response, nil
}

func (tc *TrackingController) GetRetailerTrackingDataByLot(productLotId string) ([]fiber.Map, error) {
	fmt.Println("üìå Fetching Retailer Tracking Data by ProductLotId:", productLotId)

	// ‚úÖ ‡∏î‡∏∂‡∏á Tracking IDs ‡∏à‡∏≤‡∏Å Smart Contract
	trackingIds, retailerIds, qrCodeCIDs, err := tc.BlockchainService.GetTrackingByLotId(productLotId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch tracking IDs from blockchain:", err)
		return nil, fmt.Errorf("Failed to fetch tracking IDs from blockchain")
	}

	// ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var retailerTrackingData []fiber.Map

	// ‚úÖ Loop ‡∏ó‡∏µ‡∏•‡∏∞ Tracking ID
	for i, trackingId := range trackingIds {
		fmt.Println("üìå Processing Tracking ID:", trackingId)

		// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà!)
		retailerData, err := tc.GetRetailerTrackingData(trackingId)
		if err != nil {
			fmt.Printf("‚ùå Failed to fetch retailer data for tracking ID %s: %v\n", trackingId, err)
			continue
		}

		// ‚úÖ Optionally: ‡πÄ‡∏û‡∏¥‡πà‡∏° retailerIds[i] ‡πÅ‡∏•‡∏∞ qrCodeCIDs[i] ‡∏•‡∏á‡πÉ‡∏ô response ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
		retailerData["retailerId"] = retailerIds[i]
		retailerData["qrCodeCID"] = qrCodeCIDs[i]

		retailerTrackingData = append(retailerTrackingData, retailerData)
	}

	return retailerTrackingData, nil
}

func (tc *TrackingController) GetLogisticsTrackingDataByLot(productLotId string) ([]fiber.Map, error) {
	fmt.Println("üìå Fetching Logistics Tracking Data by ProductLotId:", productLotId)

	// ‚úÖ 1. ‡∏î‡∏∂‡∏á Tracking IDs ‡∏à‡∏≤‡∏Å Blockchain
	trackingIds, _, _, err := tc.BlockchainService.GetTrackingByLotId(productLotId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch tracking IDs:", err)
		return nil, fmt.Errorf("Failed to fetch tracking IDs")
	}

	var logisticsData []fiber.Map

	// ‚úÖ 2. Loop ‡∏ó‡∏µ‡∏•‡∏∞ Tracking ID
	for _, trackingId := range trackingIds {
		fmt.Println("üìå Processing Tracking ID:", trackingId)

		// ‚úÖ 3. ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Logistics
		data, err := tc.GetLogisticsTrackingData(trackingId)
		if err != nil {
			fmt.Printf("‚ùå Failed to fetch logistics data for tracking ID %s: %v\n", trackingId, err)
			continue // ‚ùó ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡πÑ‡∏´‡∏ô error ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
		}

		logisticsData = append(logisticsData, data)
	}

	// ‚úÖ 4. Return
	return logisticsData, nil
}
