package controllers

import (
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v2"
)

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á IPFSService (‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
var ipfsService = services.NewIPFSService()

// ‚úÖ API: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
func UploadCertificate(c *fiber.Ctx) error {
	fmt.Println("üìå UploadCertificate API called...")

	file, err := c.FormFile("file")
	if err != nil {
		fmt.Println("‚ùå No file received")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "File not received"})
	}

	fmt.Println("‚úÖ File received:", file.Filename)

	// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
	src, err := file.Open()
	if err != nil {
		fmt.Println("‚ùå Failed to open file:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to open file"})
	}
	defer src.Close()

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡∏ú‡πà‡∏≤‡∏ô `ipfsService`
	cid, err := ipfsService.UploadFile(src)
	if err != nil {
		fmt.Println("‚ùå Failed to upload to IPFS:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload to IPFS"})
	}

	fmt.Println("‚úÖ Uploaded file to IPFS with CID:", cid)

	// ‚úÖ ‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message": "File uploaded successfully",
		"cid":     cid,
	})
}

func CreateCertification(c *fiber.Ctx) error {
	fmt.Println("üìå CreateCertification API called...")

	type CertRequest struct {
		FarmerID          string `json:"farmerid"`
		CertificationType string `json:"certificationtype"`
		CertificationCID  string `json:"certificationcid"`
		IssuedDate        string `json:"issued_date"`
	}

	var req CertRequest
	if err := c.BodyParser(&req); err != nil {
		fmt.Println("‚ùå Error parsing request:", err)
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request"})
	}

	fmt.Println("üìå Received Certification Request:", req)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Farmer ID ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var farmer models.Farmer
	if err := database.DB.Where("farmerid = ?", req.FarmerID).First(&farmer).Error; err != nil {
		fmt.Println("‚ùå Farmer ID not found:", req.FarmerID)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Farmer ID not found"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ CID
	if req.CertificationCID == "" {
		fmt.Println("‚ùå Certification CID is missing!")
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Certification CID is required"})
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å `string` ‚Üí `time.Time`
	var issuedDate time.Time
	var err error
	if req.IssuedDate != "" {
		issuedDate, err = time.Parse("2006-01-02", req.IssuedDate)
		if err != nil {
			fmt.Println("‚ùå Invalid date format:", req.IssuedDate)
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid date format. Use YYYY-MM-DD"})
		}
	} else {
		issuedDate = time.Time{} // ‡πÉ‡∏ä‡πâ `zero time` (NULL)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Certification ID ‡πÉ‡∏´‡∏°‡πà
	certID := fmt.Sprintf("CERT-%d", time.Now().Unix())

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
	certification := models.Certification{
		CertificationID:   certID,
		FarmerID:          req.FarmerID,
		CertificationType: req.CertificationType,
		CertificationCID:  req.CertificationCID, // ‚úÖ ‡πÉ‡∏ä‡πâ CID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å IPFS
		EffectiveDate:     time.Now(),
		IssuedDate:        issuedDate,
		CreatedOn:         time.Now(),
	}

	if err := database.DB.Create(&certification).Error; err != nil {
		fmt.Println("‚ùå Error saving certification:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to save certification"})
	}

	fmt.Println("‚úÖ Certification saved:", certification)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message":          "Certification saved successfully",
		"certification_id": certification.CertificationID,
		"cid":              certification.CertificationCID,
	})
}
