package controllers

import (
	"finalyearproject/Backend/services"
	certification "finalyearproject/Backend/services/certification_event"
	"fmt"
	"math/big"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
)

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á IPFSService (‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
var ipfsService = services.NewIPFSService()

// ‚úÖ API: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
func UploadCertificate(c *fiber.Ctx) error {
	fmt.Println("üìå UploadCertificate API called...")

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `Content-Type`
	contentType := c.Get("Content-Type")

	if strings.Contains(contentType, "multipart/form-data") {
		// ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å `multipart/form-data`
		file, err := c.FormFile("file")
		if err != nil {
			fmt.Println("‚ùå No file received")
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "File not received"})
		}

		fmt.Println("‚úÖ File received:", file.Filename)

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
		allowedExtensions := []string{".pdf", ".jpg", ".jpeg", ".png"}
		ext := strings.ToLower(filepath.Ext(file.Filename))
		if !contains(allowedExtensions, ext) {
			fmt.Println("‚ùå Unsupported file type:", ext)
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported file type"})
		}

		// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
		src, err := file.Open()
		if err != nil {
			fmt.Println("‚ùå Failed to open file:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to open file"})
		}
		defer src.Close()

		// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
		cid, err := ipfsService.UploadFile(src)
		if err != nil {
			fmt.Println("‚ùå Failed to upload to IPFS:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload to IPFS"})
		}

		fmt.Println("‚úÖ Uploaded file to IPFS with CID:", cid)

		// ‚úÖ ‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"message": "File uploaded successfully",
			"cid":     cid,
		})

	} else if strings.Contains(contentType, "application/json") {
		// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `Base64`
		var req struct {
			Base64Data string `json:"base64"`
			Filename   string `json:"filename"`
		}

		if err := c.BodyParser(&req); err != nil {
			fmt.Println("‚ùå Invalid JSON format")
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid JSON format"})
		}

		fmt.Println("‚úÖ Base64 file received:", req.Filename)

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
		allowedExtensions := []string{".pdf", ".jpg", ".png"}
		ext := strings.ToLower(filepath.Ext(req.Filename))
		if !contains(allowedExtensions, ext) {
			fmt.Println("‚ùå Unsupported file type:", ext)
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported file type"})
		}

		// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
		cid, err := ipfsService.UploadBase64File(req.Base64Data)
		if err != nil {
			fmt.Println("‚ùå Failed to upload Base64 file to IPFS:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload Base64 file to IPFS"})
		}

		fmt.Println("‚úÖ Base64 file uploaded to IPFS with CID:", cid)

		// ‚úÖ ‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"message": "File uploaded successfully",
			"cid":     cid,
		})
	}

	// ‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `Content-Type` ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
	return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported Content-Type"})
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func GetCertificationByUser(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á `entityID` ‡∏à‡∏≤‡∏Å JWT Token ‡∏ó‡∏µ‡πà AuthMiddleware ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
	entityID, ok := c.Locals("entityID").(string)
	if !ok || entityID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - entityID missing"})
	}

	fmt.Println("üîç [GetCertificationByUser] Fetching certification for entityID:", entityID)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á entityID ‡∏à‡∏≤‡∏Å Blockchain
	certifications, err := services.BlockchainServiceInstance.GetAllCertificationsForEntity(entityID)
	if err != nil {
		fmt.Println("‚ùå [GetCertificationByUser] Failed to fetch certifications from Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch certifications"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Query Parameter `?includeExpired=true`
	includeExpired := c.Query("includeExpired") == "true"

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Active ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ `includeExpired=true` ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var filteredCerts []certification.CertificationEventCertEvent
	for _, cert := range certifications {
		if includeExpired || cert.IsActive {
			filteredCerts = append(filteredCerts, cert)
		}
	}

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Certifications ‡∏ï‡∏≤‡∏° `expiryDate` (‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢)
	sort.Slice(filteredCerts, func(i, j int) bool {
		return filteredCerts[i].ExpiryDate.Cmp(filteredCerts[j].ExpiryDate) > 0
	})

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
	return c.JSON(fiber.Map{
		"entity_id":      entityID,
		"certifications": filteredCerts,
	})
}

// DeleteCertification - ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Blockchain
func DeleteCertification(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á `walletAddress` ‡πÅ‡∏•‡∏∞ `entityID` ‡∏à‡∏≤‡∏Å JWT Token
	walletAddress, ok := c.Locals("walletAddress").(string)
	if !ok || walletAddress == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - walletAddress missing"})
	}

	entityID, ok := c.Locals("entityID").(string)
	if !ok || entityID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - entityID missing"})
	}

	fmt.Println("üìå [DeleteCertification] Deleting certification for Wallet:", walletAddress, "EntityID:", entityID)

	// ‚úÖ ‡∏£‡∏±‡∏ö eventID ‡∏à‡∏≤‡∏Å Query Parameter
	eventID := c.Query("eventID")
	if eventID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Missing eventID"})
	}

	fmt.Println("üìå [DeleteCertification] Using entityID:", entityID, "and eventID:", eventID)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á `entityID` ‡∏à‡∏≤‡∏Å Blockchain
	certifications, err := services.BlockchainServiceInstance.GetAllCertificationsForEntity(entityID)
	if err != nil {
		fmt.Println("‚ùå [DeleteCertification] Failed to fetch certifications from Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch certifications"})
	}

	fmt.Println("üìå Retrieved", len(certifications), "certifications from blockchain for entity:", entityID)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `eventID` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var certExists bool
	for _, cert := range certifications {
		fmt.Println("üîç Checking eventID:", cert.EventID, "‚Üí Active:", cert.IsActive) // ‚úÖ Debug
		if cert.EventID == eventID && cert.IsActive {
			certExists = true
			break
		}
	}

	if !certExists {
		fmt.Println("‚ùå Certification event not found or already inactive:", eventID)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Certification event not found or already inactive"})
	}

	// ‚úÖ ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô Blockchain ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `walletAddress`
	txHash, err := services.BlockchainServiceInstance.DeactivateCertificationOnBlockchain(walletAddress, eventID)
	if err != nil {
		fmt.Println("‚ùå [DeleteCertification] Failed to deactivate certification:", eventID, err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to deactivate certification"})
	}

	fmt.Println("‚úÖ Certification Event deactivated on Blockchain:", txHash)
	return c.JSON(fiber.Map{
		"message":       "Certification deactivated successfully",
		"event_id":      eventID,
		"entity_id":     entityID,
		"wallet":        walletAddress,
		"blockchain_tx": txHash,
	})
}

func CheckCertificationCID(c *fiber.Ctx) error {
	certCID := c.Params("certCID")
	if certCID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Missing certCID"})
	}

	fmt.Println("üîç [CheckCertificationCID] Checking CID in Blockchain:", certCID)

	// ‚úÖ ‡πÉ‡∏ä‡πâ `CheckUserCertification` ‡πÅ‡∏ó‡∏ô
	exists, err := services.BlockchainServiceInstance.CheckUserCertification(certCID)
	if err != nil {
		fmt.Println("‚ùå [CheckCertificationCID] Failed to check CID in Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to check certification CID"})
	}

	// ‚úÖ `CheckUserCertification` ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ `true` ‡∏ñ‡πâ‡∏≤ CID **‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ** ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
	return c.JSON(fiber.Map{
		"certCID": certCID,
		"exists":  !exists, // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á (true = ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, false = ‡πÑ‡∏°‡πà‡∏°‡∏µ)
	})
}

// StoreCertification - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏•‡∏á Blockchain
func StoreCertification(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á `walletAddress` ‡πÅ‡∏•‡∏∞ `entityID` ‡∏à‡∏≤‡∏Å JWT Token
	walletAddress, ok := c.Locals("walletAddress").(string)
	if !ok || walletAddress == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - walletAddress missing"})
	}

	entityID, ok := c.Locals("entityID").(string)
	if !ok || entityID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - entityID missing"})
	}

	role, ok := c.Locals("role").(string)
	if !ok || role == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized - role missing"})
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Role ‡πÄ‡∏õ‡πá‡∏ô EntityType
	entityType := map[string]string{
		"farmer":    "Farmer",
		"factory":   "Factory",
		"logistics": "Logistics",
		"retailer":  "Retailer",
	}[role]

	if entityType == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid role type"})
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `certCID` ‡∏à‡∏≤‡∏Å Body
	var request struct {
		CertCID string `json:"certCID"`
	}
	if err := c.BodyParser(&request); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request format"})
	}

	if request.CertCID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Missing certCID"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `eventID`
	eventID := fmt.Sprintf("EVENT-%s-%s", entityID, uuid.New().String())

	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î `issuedDate` ‡πÅ‡∏•‡∏∞ `expiryDate`
	issuedDate := big.NewInt(time.Now().Unix())
	expiryDate := big.NewInt(time.Now().AddDate(1, 0, 0).Unix()) // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏õ‡∏µ

	fmt.Println("üìå [StoreCertification] Storing Certification on Blockchain...")
	fmt.Println("   - Wallet Address:", walletAddress)
	fmt.Println("   - Entity Type:", entityType)
	fmt.Println("   - Entity ID:", entityID)
	fmt.Println("   - Cert CID:", request.CertCID)
	fmt.Println("   - Issued Date:", issuedDate)
	fmt.Println("   - Expiry Date:", expiryDate)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	txHash, err := services.BlockchainServiceInstance.StoreCertificationOnBlockchain(
		walletAddress, eventID, entityType, entityID, request.CertCID, issuedDate, expiryDate,
	)
	if err != nil {
		fmt.Println("‚ùå [StoreCertification] Failed to store certification:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to store certification"})
	}

	fmt.Println("‚úÖ [StoreCertification] Certification stored successfully. TX Hash:", txHash)

	return c.JSON(fiber.Map{
		"message":       "Certification stored successfully",
		"event_id":      eventID,
		"entity_id":     entityID,
		"wallet":        walletAddress,
		"blockchain_tx": txHash,
	})
}
