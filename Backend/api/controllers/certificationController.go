package controllers

import (
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"
	certification "finalyearproject/Backend/services/certification_event"
	"fmt"
	"math/big"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
)

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á IPFSService (‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
var ipfsService = services.NewIPFSService()

// ‚úÖ API: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
func UploadCertificate(c *fiber.Ctx) error {
	fmt.Println("üìå UploadCertificate API called...")

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `Content-Type`
	contentType := c.Get("Content-Type")

	if strings.Contains(contentType, "multipart/form-data") {
		// ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å `multipart/form-data`
		file, err := c.FormFile("file")
		if err != nil {
			fmt.Println("‚ùå No file received")
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "File not received"})
		}

		fmt.Println("‚úÖ File received:", file.Filename)

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
		allowedExtensions := []string{".pdf", ".jpg", ".jpeg", ".png"}
		ext := strings.ToLower(filepath.Ext(file.Filename))
		if !contains(allowedExtensions, ext) {
			fmt.Println("‚ùå Unsupported file type:", ext)
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported file type"})
		}

		// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
		src, err := file.Open()
		if err != nil {
			fmt.Println("‚ùå Failed to open file:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to open file"})
		}
		defer src.Close()

		// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
		cid, err := ipfsService.UploadFile(src)
		if err != nil {
			fmt.Println("‚ùå Failed to upload to IPFS:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload to IPFS"})
		}

		fmt.Println("‚úÖ Uploaded file to IPFS with CID:", cid)

		// ‚úÖ ‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"message": "File uploaded successfully",
			"cid":     cid,
		})

	} else if strings.Contains(contentType, "application/json") {
		// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `Base64`
		var req struct {
			Base64Data string `json:"base64"`
			Filename   string `json:"filename"`
		}

		if err := c.BodyParser(&req); err != nil {
			fmt.Println("‚ùå Invalid JSON format")
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid JSON format"})
		}

		fmt.Println("‚úÖ Base64 file received:", req.Filename)

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
		allowedExtensions := []string{".pdf", ".jpg", ".png"}
		ext := strings.ToLower(filepath.Ext(req.Filename))
		if !contains(allowedExtensions, ext) {
			fmt.Println("‚ùå Unsupported file type:", ext)
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported file type"})
		}

		// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
		cid, err := ipfsService.UploadBase64File(req.Base64Data)
		if err != nil {
			fmt.Println("‚ùå Failed to upload Base64 file to IPFS:", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload Base64 file to IPFS"})
		}

		fmt.Println("‚úÖ Base64 file uploaded to IPFS with CID:", cid)

		// ‚úÖ ‡∏™‡πà‡∏á CID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"message": "File uploaded successfully",
			"cid":     cid,
		})
	}

	// ‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `Content-Type` ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
	return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Unsupported Content-Type"})
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func GetCertificationByUser(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á `userID` ‡∏à‡∏≤‡∏Å JWT Token ‡∏ó‡∏µ‡πà AuthMiddleware ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
	userID, ok := c.Locals("userID").(string)
	if !ok || userID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized"})
	}

	fmt.Println("üîç [GetCertificationByUser] Fetching certification for userID:", userID)

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `entityID` ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
	var user models.User
	if err := database.DB.Where("userid = ?", userID).First(&user).Error; err != nil {
		fmt.Println("‚ùå [GetCertificationByUser] User ID not found:", userID)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}
	if user.EntityID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "User has no associated entity"})
	}

	entityID := user.EntityID
	fmt.Println("‚úÖ [GetCertificationByUser] Found entityID:", entityID)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á entityID ‡∏à‡∏≤‡∏Å Blockchain
	certifications, err := services.BlockchainServiceInstance.GetAllCertificationsForEntity(entityID)
	if err != nil {
		fmt.Println("‚ùå [GetCertificationByUser] Failed to fetch certifications from Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch certifications"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Query Parameter `?includeExpired=true`
	includeExpired := c.Query("includeExpired") == "true"

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Active ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ `includeExpired=true` ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var filteredCerts []certification.CertificationEventCertEvent
	for _, cert := range certifications {
		if includeExpired || cert.IsActive {
			filteredCerts = append(filteredCerts, cert)
		}
	}

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Certifications ‡∏ï‡∏≤‡∏° `expiryDate` (‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢)
	sort.Slice(filteredCerts, func(i, j int) bool {
		return filteredCerts[i].ExpiryDate.Cmp(filteredCerts[j].ExpiryDate) > 0
	})

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
	return c.JSON(fiber.Map{
		"entity_id":      entityID,
		"certifications": filteredCerts,
	})
}

func DeleteCertification(c *fiber.Ctx) error {
	entityID := c.Params("entityID")
	eventID := c.Query("eventID") // ‚úÖ ‡∏£‡∏±‡∏ö eventID ‡∏à‡∏≤‡∏Å Query Parameter

	if entityID == "" || eventID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Missing entityID or eventID"})
	}

	fmt.Println("üìå [DeleteCertification] Deleting certification for entityID:", entityID, "eventID:", eventID)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `entityID` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var farmer models.Farmer
	if err := database.DB.Select("farmerid").Where("entityid = ?", entityID).First(&farmer).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Entity ID not found in database"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á `entityID` ‡∏à‡∏≤‡∏Å Blockchain
	certifications, err := services.BlockchainServiceInstance.GetAllCertificationsForEntity(entityID)
	if err != nil {
		fmt.Println("‚ùå [DeleteCertification] Failed to fetch certifications from Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch certifications"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `eventID` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Blockchain ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	certMap := make(map[string]bool)
	for _, cert := range certifications {
		if cert.IsActive {
			certMap[cert.EventID] = true
		}
	}
	if !certMap[eventID] {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Certification event not found or already inactive"})
	}

	// ‚úÖ ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
	txHash, err := services.BlockchainServiceInstance.DeactivateCertificationOnBlockchain(eventID)
	if err != nil {
		fmt.Println("‚ùå [DeleteCertification] Failed to deactivate certification:", eventID, err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to deactivate certification"})
	}

	if txHash == "" {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain transaction failed"})
	}

	fmt.Println("‚úÖ Certification Event deactivated on Blockchain:", txHash)
	return c.JSON(fiber.Map{
		"message":       "Certification deactivated successfully",
		"event_id":      eventID,
		"entity_id":     entityID,
		"blockchain_tx": txHash,
	})
}

func CheckCertificationCID(c *fiber.Ctx) error {
	certCID := c.Params("certCID")
	if certCID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Missing certCID"})
	}

	fmt.Println("üîç [CheckCertificationCID] Checking CID in Blockchain:", certCID)

	// ‚úÖ ‡πÉ‡∏ä‡πâ `CheckUserCertification` ‡πÅ‡∏ó‡∏ô
	exists, err := services.BlockchainServiceInstance.CheckUserCertification(certCID)
	if err != nil {
		fmt.Println("‚ùå [CheckCertificationCID] Failed to check CID in Blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to check certification CID"})
	}

	// ‚úÖ `CheckUserCertification` ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ `true` ‡∏ñ‡πâ‡∏≤ CID **‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ** ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
	return c.JSON(fiber.Map{
		"certCID": certCID,
		"exists":  !exists, // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á (true = ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, false = ‡πÑ‡∏°‡πà‡∏°‡∏µ)
	})
}

func UpdateCertification(c *fiber.Ctx) error {
	userID, ok := c.Locals("userID").(string) // ‚úÖ ‡∏î‡∏∂‡∏á UserID ‡∏à‡∏≤‡∏Å Middleware
	if !ok || userID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized"})
	}

	fmt.Println("üîç [UpdateCertification] Updating certification for userID:", userID)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏°‡∏µ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var user models.User
	if err := database.DB.Where("userid = ?", userID).First(&user).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}
	if user.EntityID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "User does not have a registered farm"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å EntityID ‡∏Ç‡∏≠‡∏á User
	var farmer models.Farmer
	if err := database.DB.Where("farmerid = ?", user.EntityID).First(&farmer).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "Farm not found"})
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `cert_cid` ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å FormData
	newCertCID := strings.TrimSpace(c.FormValue("cert_cid"))
	if newCertCID == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Certification CID is required"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å Blockchain
	oldCerts, err := services.BlockchainServiceInstance.GetAllCertificationsForEntity(user.EntityID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch existing certifications:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch existing certifications"})
	}

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	for _, cert := range oldCerts {
		if cert.CertificationCID == newCertCID {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "New certification CID is the same as the existing one"})
		}
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `eventID` ‡πÉ‡∏´‡∏°‡πà
	eventID := fmt.Sprintf("EVENT-%s-%s", user.EntityID, uuid.New().String())

	// ‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (1 ‡∏õ‡∏µ)
	issuedDate := time.Now()
	expiryDate := issuedDate.AddDate(1, 0, 0)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô *big.Int
	issuedDateBigInt := big.NewInt(issuedDate.Unix())
	expiryDateBigInt := big.NewInt(expiryDate.Unix())

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Blockchain (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡πÉ‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
	certTxHash, err := services.BlockchainServiceInstance.StoreCertificationOnBlockchain(
		farmer.WalletAddress, // ‚úÖ ‡πÉ‡∏ä‡πâ Wallet Address ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°
		eventID,
		"farmer",
		user.EntityID,
		newCertCID,
		issuedDateBigInt,
		expiryDateBigInt,
	)

	if err != nil {
		fmt.Println("‚ùå Failed to store new certification on blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to store new certification on blockchain"})
	}

	fmt.Println("‚úÖ Certification updated on Blockchain. Transaction Hash:", certTxHash)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ Frontend
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message":       "Certification uploaded successfully",
		"event_id":      eventID,
		"cert_cid":      newCertCID,
		"blockchain_tx": certTxHash,
	})
}
