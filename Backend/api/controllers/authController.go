package controllers

import (
	"encoding/base64"
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/middleware"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/utils"
	"fmt"
	"io/ioutil"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"golang.org/x/crypto/bcrypt"
)

// LoginRequest struct
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse struct
type LoginResponse struct {
	Message string `json:"message"`
	Role    string `json:"role"`
}

// RefreshTokenHandler - API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Token ‡πÉ‡∏´‡∏°‡πà
func RefreshTokenHandler(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Cookie ‡∏´‡∏£‡∏∑‡∏≠ Header
	tokenString := c.Cookies("auth_token")
	if tokenString == "" {
		tokenString = c.Get("Authorization")
		if len(tokenString) > 7 && tokenString[:7] == "Bearer " {
			tokenString = tokenString[7:]
		}
	}

	if tokenString == "" {
		fmt.Println("‚ùå [RefreshToken] No token found")
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Authorization token required"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Token
	claims, err := middleware.ValidateToken(tokenString)
	if err != nil {
		fmt.Println("‚ùå [RefreshToken] Invalid token:", err)
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Invalid token"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Database
	var user models.User
	result := database.DB.Where("userid = ?", claims.UserID).First(&user)
	if result.Error != nil {
		fmt.Println("‚ùå [RefreshToken] User not found:", claims.UserID)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á walletAddress ‡∏ï‡∏≤‡∏° Role
	var walletAddress string
	switch user.Role {
	case "farmer":
		var farmer models.Farmer
		if err := database.DB.Where("farmerid = ?", user.EntityID).First(&farmer).Error; err == nil {
			walletAddress = farmer.WalletAddress
		}
	case "factory":
		var factory models.Factory
		if err := database.DB.Where("factoryid = ?", user.EntityID).First(&factory).Error; err == nil {
			walletAddress = factory.WalletAddress
		}
	case "logistics":
		var logistics models.Logistics
		if err := database.DB.Where("logisticsid = ?", user.EntityID).First(&logistics).Error; err == nil {
			walletAddress = logistics.WalletAddress
		}
	case "retailer":
		var retailer models.Retailer
		if err := database.DB.Where("retailerid = ?", user.EntityID).First(&retailer).Error; err == nil {
			walletAddress = retailer.WalletAddress
		}
	}

	fmt.Println("‚úÖ [RefreshToken] Generating new token - Role:", user.Role, "EntityID:", user.EntityID, "Wallet:", walletAddress)

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡∏°‡πà
	newToken, err := middleware.GenerateToken(user.UserID, user.Email, user.Role, user.EntityID, walletAddress)
	if err != nil {
		fmt.Println("‚ùå [RefreshToken] Failed to generate token:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to generate token"})
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Cookie
	c.Cookie(&fiber.Cookie{
		Name:     "auth_token",
		Value:    newToken,
		Expires:  time.Now().Add(24 * time.Hour),
		HTTPOnly: true,
		Secure:   true,
		SameSite: "None",
		Path:     "/",
	})

	// ‚úÖ ‡∏™‡πà‡∏á Token ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message":       "Token refreshed successfully",
		"token":         newToken,
		"role":          user.Role,
		"entityID":      user.EntityID,
		"walletAddress": walletAddress,
	})
}

// Login handles user authentication
func Login(c *fiber.Ctx) error {
	var req LoginRequest

	// ‚úÖ Bind JSON data
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request format"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Database
	var user models.User
	if err := database.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Invalid email or password"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(req.Password)); err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Invalid email or password"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á `walletAddress` ‡∏ï‡∏≤‡∏° Role ‡∏Ç‡∏≠‡∏á User
	var walletAddress string
	switch user.Role {
	case "farmer":
		var farmer models.Farmer
		if err := database.DB.Where("farmerid = ?", user.EntityID).First(&farmer).Error; err == nil {
			walletAddress = farmer.WalletAddress
		}
	case "factory":
		var factory models.Factory
		if err := database.DB.Where("factoryid = ?", user.EntityID).First(&factory).Error; err == nil {
			walletAddress = factory.WalletAddress
		}
	case "logistics":
		var logistics models.Logistics
		if err := database.DB.Where("logisticsid = ?", user.EntityID).First(&logistics).Error; err == nil {
			walletAddress = logistics.WalletAddress
		}
	case "retailer":
		var retailer models.Retailer
		if err := database.DB.Where("retailerid = ?", user.EntityID).First(&retailer).Error; err == nil {
			walletAddress = retailer.WalletAddress
		}
	}

	// ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ `walletAddress`
	fmt.Println("üîç [Login] Extracted WalletAddress:", walletAddress, "for Role:", user.Role, "EntityID:", user.EntityID)

	// ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ `walletAddress`
	fmt.Println("üîç [Login] Extracted WalletAddress:", walletAddress, "for Role:", user.Role, "EntityID:", user.EntityID)

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° `walletAddress`
	token, err := middleware.GenerateToken(user.UserID, user.Email, user.Role, user.EntityID, walletAddress)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to generate token"})
	}

	// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
	c.Cookie(&fiber.Cookie{
		Name:     "auth_token",
		Value:    token,
		Expires:  time.Now().Add(24 * time.Hour),
		HTTPOnly: true,
		Secure:   true,   // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HTTPS ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô `true`
		SameSite: "None", // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ `None` ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Cross-Site
		Path:     "/",
		Domain:   "", // ‚úÖ ‡πÉ‡∏™‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Frontend
	})

	// ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	fmt.Println("‚úÖ [Login] Token set in cookie for user:", user.UserID, "EntityID:", user.EntityID, "Wallet:", walletAddress)

	// ‚úÖ ‡∏™‡πà‡∏á Role, EntityID ‡πÅ‡∏•‡∏∞ WalletAddress ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
	response := fiber.Map{
		"message":       "Login successful",
		"role":          user.Role,
		"entityID":      user.EntityID,
		"walletAddress": walletAddress,
	}

	return c.Status(fiber.StatusOK).JSON(response)
}

// ‚úÖ ‡∏î‡∏∂‡∏á Role ‡πÅ‡∏•‡∏∞ EntityID ‡∏à‡∏≤‡∏Å JWT Token ‡πÉ‡∏ô Cookie
func GetUserRole(c *fiber.Ctx) error {
	// ‚úÖ ‡πÉ‡∏ä‡πâ Fiber API ‡∏î‡∏∂‡∏á Token ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
	tokenString := c.Cookies("auth_token")
	if tokenString == "" {
		fmt.Println("‚ùå [GetUserRole] No token found in Cookie")
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
			"error": "No authentication token found. Please login again.",
		})
	}

	// ‚úÖ Validate Token
	claims, err := middleware.ValidateToken(tokenString)
	if err != nil {
		fmt.Println("‚ùå [GetUserRole] Invalid token:", err)
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
			"error": "Invalid or expired token. Please login again.",
		})
	}

	fmt.Println("‚úÖ [GetUserRole] Authenticated User Role:", claims.Role, "EntityID:", claims.EntityID)

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"role":     claims.Role,
		"entityID": claims.EntityID, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° EntityID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
	})
}

func UpdateUserRole(c *fiber.Ctx) error {
	type RoleRequest struct {
		Email string `json:"email"`
		Role  string `json:"role"`
	}

	var req RoleRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Cannot parse JSON"})
	}

	fmt.Println("üìå [UpdateUserRole] Updating role for:", req.Email, "New Role:", req.Role)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Role ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	validRoles := map[string]bool{
		"farmer":    true,
		"factory":   true,
		"logistics": true,
		"retailer":  true,
		"user":      true,
	}

	if !validRoles[req.Role] {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid role"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	var user models.User
	if err := database.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ entityID)
	user.Role = req.Role
	if err := database.DB.Save(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to update user role"})
	}

	fmt.Println("‚úÖ [UpdateUserRole] User role updated successfully")
	return c.Status(fiber.StatusOK).JSON(fiber.Map{"message": "User role updated successfully"})
}

// Register a new user
func Register(c *fiber.Ctx) error {
	type Request struct {
		Username string `json:"username"`
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	var req Request
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Cannot parse JSON"})
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var existingUser models.User
	if err := database.DB.Where("email = ?", req.Email).First(&existingUser).Error; err == nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Email already exists"})
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var existingUsername models.User
	if err := database.DB.Where("username = ?", req.Username).First(&existingUsername).Error; err == nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Username already exists"})
	}

	// Hash Password
	hashedPassword, err := utils.HashPassword(req.Password)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to hash password"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å Database
	var sequence int64
	if err := database.DB.Raw("SELECT nextval('user_id_seq')").Scan(&sequence).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to generate user ID"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á UserID ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `YYNNNNN` (‡∏õ‡∏µ + ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö)
	yearPrefix := time.Now().Format("06")                 // ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡∏õ‡∏µ‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "25" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ 2025
	userID := fmt.Sprintf("%s%05d", yearPrefix, sequence) // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏´‡∏•‡∏±‡∏Å, 00001-99999

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ EntityID ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Default (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Role)
	entityID := "PENDING_ROLE" // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Role

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
	user := models.User{
		UserID:    userID,
		Username:  req.Username,
		Email:     req.Email,
		Password:  hashedPassword,
		Role:      "pending", // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
		EntityID:  entityID,  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Entity
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ‡∏•‡∏á Database
	result := database.DB.Create(&user)
	if result.Error != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to create user"})
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"message":  "User registered successfully",
		"user_id":  user.UserID,
		"username": user.Username,
		"email":    user.Email,
	})
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout
func Logout(c *fiber.Ctx) error {
	// ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ `auth_token`
	c.Cookie(&fiber.Cookie{
		Name:     "auth_token",
		Value:    "",
		Expires:  time.Now().Add(-1 * time.Hour), // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
		HTTPOnly: true,
		Secure:   true,
		SameSite: "None",
		Path:     "/",
		Domain:   "",
	})

	// ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	fmt.Println("‚úÖ [Logout] User logged out successfully.")

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message": "Logout successful",
	})
}

func GetUserInfo(c *fiber.Ctx) error {
	// ‡∏î‡∏∂‡∏á userID ‡∏à‡∏≤‡∏Å JWT middleware
	userID, ok := c.Locals("userID").(string)
	if !ok || userID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized"})
	}

	var user models.User
	if err := database.DB.Where("userid = ?", userID).First(&user).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}

	// ‚úÖ ‡πÅ‡∏¢‡∏Å firstName ‡πÅ‡∏•‡∏∞ lastName ‡∏à‡∏≤‡∏Å username
	nameParts := strings.SplitN(user.Username, " ", 2)
	firstName := nameParts[0]
	lastName := ""
	if len(nameParts) > 1 {
		lastName = nameParts[1]
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Binary ‡πÄ‡∏õ‡πá‡∏ô Base64
	var profileImageBase64 string
	if len(user.ProfileImage) > 0 {
		profileImageBase64 = "data:image/png;base64," + base64.StdEncoding.EncodeToString(user.ProfileImage)
	} else {
		profileImageBase64 = "" // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	return c.JSON(fiber.Map{
		"email":        user.Email,
		"firstName":    firstName,          // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å username
		"lastName":     lastName,           // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å username
		"telephone":    user.Telephone,     // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å User
		"profileImage": profileImageBase64, // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô Base64
	})
}

func UpdateUserInfo(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á userID ‡∏à‡∏≤‡∏Å context
	userID, ok := c.Locals("userID").(string)
	if !ok || userID == "" {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Unauthorized"})
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ `c.FormValue()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
	email := c.FormValue("email")
	telephone := c.FormValue("telephone")
	firstName := c.FormValue("firstName")
	lastName := c.FormValue("lastName")

	// ‚úÖ ‡∏£‡∏ß‡∏° firstName + lastName ‡πÄ‡∏õ‡πá‡∏ô username
	username := firstName
	if lastName != "" {
		username += " " + lastName
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
	var profileImage []byte
	file, err := c.FormFile("profileImage")
	if err == nil {
		fileContent, err := file.Open()
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Cannot read file"})
		}
		defer fileContent.Close()

		profileImage, err = ioutil.ReadAll(fileContent)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Cannot read file content"})
		}
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å DB
	var user models.User
	if err := database.DB.Where("userid = ?", userID).First(&user).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
	updateData := map[string]interface{}{}
	if email != "" {
		updateData["email"] = email
	}
	if telephone != "" {
		updateData["telephone"] = telephone
	}
	if firstName != "" || lastName != "" {
		updateData["username"] = username
	}
	if len(profileImage) > 0 {
		updateData["profile_image"] = profileImage
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := database.DB.Model(&models.User{}).Where("userid = ?", userID).Updates(updateData).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to update user info"})
	}

	return c.JSON(fiber.Map{"message": "User info updated successfully"})
}

// CheckEmailAvailability ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func CheckEmailAvailability(c *fiber.Ctx) error {
	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå `email` ‡∏à‡∏≤‡∏Å Query String
	email := c.Query("email")
	if email == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Email is required"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	var existingUser models.User
	if err := database.DB.Where("email = ?", email).First(&existingUser).Error; err == nil {
		// ‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"email":     email,
			"available": false,
		})
	}

	// ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"email":     email,
		"available": true,
	})
}
