package controllers

import (
	"encoding/json"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"time"

	"gorm.io/gorm"

	"github.com/gofiber/fiber/v2"
)

type RawMilkController struct {
	DB                *gorm.DB
	BlockchainService *services.BlockchainService
	QRCodeService     *services.QRCodeService
	IPFSService       *services.IPFSService
	MilkTankCounter   map[string]int
	Mutex             sync.Mutex
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Constructor ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `MilkTankCounter` ‡πÅ‡∏•‡∏∞ `Mutex`
func NewRawMilkController(
	db *gorm.DB,
	blockchainService *services.BlockchainService,
	ipfsService *services.IPFSService,
	qrCodeService *services.QRCodeService,
) *RawMilkController {
	return &RawMilkController{
		DB:                db,
		BlockchainService: blockchainService,
		IPFSService:       ipfsService,
		QRCodeService:     qrCodeService,
		MilkTankCounter:   make(map[string]int), // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ MilkTankCounter
		Mutex:             sync.Mutex{},         // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ Mutex
	}
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Tank ID (FarmID + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + Running Number)
func (rmc *RawMilkController) generateTankID(farmID string) string {
	rmc.Mutex.Lock()
	defer rmc.Mutex.Unlock()

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMMDD
	currentDate := time.Now().Format("20060102")

	// ‚úÖ ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Running Number (FarmID + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
	key := farmID + "_" + currentDate

	// ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö
	if _, exists := rmc.MilkTankCounter[key]; !exists {
		rmc.MilkTankCounter[key] = 1
	} else {
		rmc.MilkTankCounter[key]++
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Tank ID => FarmID + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + Running Number (3 ‡∏´‡∏•‡∏±‡∏Å)
	tankID := fmt.Sprintf("%s-%s-%03d", farmID, currentDate, rmc.MilkTankCounter[key])

	fmt.Println("‚úÖ Generated Tank ID:", tankID)
	return tankID
}

func (rmc *RawMilkController) CreateMilkTank(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Create Milk Tank")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)
	farmID := c.Locals("entityID").(string)
	walletAddress := c.Locals("walletAddress").(string)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
	if role != "farmer" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only farmers can create milk tanks"})
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	var request struct {
		MilkTankInfo    json.RawMessage `json:"milkTankInfo"` // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MilkTankInfo ‡πÅ‡∏ö‡∏ö‡∏î‡∏¥‡∏ö (Raw JSON)
		ShippingAddress struct {
			CompanyName string `json:"companyName"`
			FirstName   string `json:"firstName"`
			LastName    string `json:"lastName"`
			Email       string `json:"email"`
			AreaCode    string `json:"areaCode"`
			PhoneNumber string `json:"phoneNumber"`
			Address     string `json:"address"`
			Province    string `json:"province"`
			District    string `json:"district"`
			SubDistrict string `json:"subDistrict"`
			PostalCode  string `json:"postalCode"`
			Location    string `json:"location"`
		} `json:"shippingAddress"`
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ json.Unmarshal() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := json.Unmarshal(c.Body(), &request); err != nil {
		fmt.Println("‚ùå Error parsing request body:", err)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body"})
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á MilkTankInfo ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Raw JSON ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Struct
	var milkTankInfo struct {
		FarmName        string `json:"farmName"`
		PersonInCharge  string `json:"personInCharge"`
		Quantity        string `json:"quantity"`
		QuantityUnit    string `json:"quantityUnit"`
		Temp            string `json:"temp"`
		TempUnit        string `json:"tempUnit"`
		PH              string `json:"pH"`
		Fat             string `json:"fat"`
		Protein         string `json:"protein"`
		Bacteria        bool   `json:"bacteria"`
		BacteriaInfo    string `json:"bacteriaInfo"`
		Contaminants    bool   `json:"contaminants"`
		ContaminantInfo string `json:"contaminantInfo"`
		AbnormalChar    bool   `json:"abnormalChar"`
		AbnormalType    struct {
			SmellBad      bool `json:"smellBad"`
			SmellNotFresh bool `json:"smellNotFresh"`
			AbnormalColor bool `json:"abnormalColor"`
			Sour          bool `json:"sour"`
			Bitter        bool `json:"bitter"`
			Cloudy        bool `json:"cloudy"`
			Lumpy         bool `json:"lumpy"`
			Separation    bool `json:"separation"`
		} `json:"abnormalType"`
	}

	if err := json.Unmarshal(request.MilkTankInfo, &milkTankInfo); err != nil {
		fmt.Println("‚ùå Error parsing MilkTankInfo:", err)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid MilkTankInfo data"})
	}

	// ‚úÖ Debug Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
	fmt.Printf("üìå Debug - Full MilkTankInfo Struct: %+v\n", milkTankInfo)
	fmt.Println("üìå Debug - Received Person In Charge:", milkTankInfo.PersonInCharge)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ PersonInCharge ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	if milkTankInfo.PersonInCharge == "" {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "personInCharge is required"})
	}

	// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ FactoryID ‡∏à‡∏≤‡∏Å CompanyName
	var factory models.Factory
	if err := rmc.DB.Where("companyname = ?", request.ShippingAddress.CompanyName).First(&factory).Error; err != nil {
		fmt.Println("‚ùå Factory not found:", err)
		return c.Status(http.StatusNotFound).JSON(fiber.Map{"error": "Factory not found"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `tankId`
	tankId := rmc.generateTankID(farmID)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‚Üí uint64
	quantity, _ := strconv.ParseUint(milkTankInfo.Quantity, 10, 64)
	temp, _ := strconv.ParseUint(milkTankInfo.Temp, 10, 64)
	ph, _ := strconv.ParseUint(milkTankInfo.PH, 10, 64)
	fat, _ := strconv.ParseUint(milkTankInfo.Fat, 10, 64)
	protein, _ := strconv.ParseUint(milkTankInfo.Protein, 10, 64)

	// ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ IPFS
	milkMetadata := map[string]interface{}{
		"farmName":        milkTankInfo.FarmName,
		"personInCharge":  milkTankInfo.PersonInCharge,
		"quantity":        quantity,
		"quantityUnit":    milkTankInfo.QuantityUnit,
		"temperature":     temp,
		"tempUnit":        milkTankInfo.TempUnit,
		"pH":              ph,
		"fat":             fat,
		"protein":         protein,
		"bacteria":        milkTankInfo.Bacteria,
		"bacteriaInfo":    milkTankInfo.BacteriaInfo,
		"contaminants":    milkTankInfo.Contaminants,
		"contaminantInfo": milkTankInfo.ContaminantInfo,
		"abnormalChar":    milkTankInfo.AbnormalChar,
		"abnormalType":    milkTankInfo.AbnormalType,
		"shippingAddress": request.ShippingAddress,
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î IPFS
	qualityReportCID, err := rmc.IPFSService.UploadMilkDataToIPFS(milkMetadata, nil)
	if err != nil {
		fmt.Println("‚ùå Failed to upload to IPFS:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to upload quality report"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
	qrCodeCID, err := rmc.QRCodeService.GenerateQRCode(tankId)
	if err != nil {
		fmt.Println("‚ùå Failed to generate QR Code:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to generate QR Code"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ Blockchain
	txHash, err := rmc.BlockchainService.CreateMilkTank(
		walletAddress,
		tankId,
		factory.FactoryID,
		milkTankInfo.PersonInCharge,
		qualityReportCID,
		qrCodeCID,
	)
	if err != nil {
		fmt.Println("‚ùå Blockchain transaction failed:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain transaction failed"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response
	return c.Status(http.StatusCreated).JSON(fiber.Map{
		"message":          "Milk tank created successfully",
		"tankId":           tankId,
		"txHash":           txHash,
		"qrCodeCID":        qrCodeCID,
		"qualityReportCID": qualityReportCID,
	})
}

func (rmc *RawMilkController) GetFarmRawMilkTanks(c *fiber.Ctx) error {
	fmt.Println("üìå Request received: Get Farm Raw Milk Tanks")

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT Token
	role := c.Locals("role").(string)
	farmerWallet := c.Locals("walletAddress").(string)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Farmer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	if role != "farmer" {
		return c.Status(http.StatusForbidden).JSON(fiber.Map{"error": "Access denied: Only farmers can view raw milk tanks"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search Query)
	searchQuery := strings.ToLower(c.Query("search", ""))

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å Blockchain
	milkTanks, err := rmc.BlockchainService.GetMilkTanksByFarmer(farmerWallet)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch raw milk tanks:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch raw milk tanks"})
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Search Query
	var filteredMilkTanks []map[string]interface{}
	for _, tank := range milkTanks {
		tankId := tank["tankId"].(string)
		personInCharge := tank["personInCharge"].(string)

		// ‚úÖ ‡∏ñ‡πâ‡∏≤ searchQuery ‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° Tank ID ‡∏´‡∏£‡∏∑‡∏≠ Person in Charge
		if searchQuery == "" || strings.Contains(strings.ToLower(tankId), searchQuery) || strings.Contains(strings.ToLower(personInCharge), searchQuery) {
			filteredMilkTanks = append(filteredMilkTanks, map[string]interface{}{
				"tankId":         tankId,
				"personInCharge": personInCharge,
				"status":         tank["status"].(uint8), // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Enum ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç
				"moreInfoLink":   fmt.Sprintf("/Farmer/FarmDetails?id=%s", tankId),
			})
		}
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend
	return c.Status(http.StatusOK).JSON(fiber.Map{
		"displayedMilkTanks": filteredMilkTanks,
		"addNewTankLink":     "/Farmer/FarmCreateRM",
	})
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏ô‡∏°‡∏î‡∏¥‡∏ö‡∏ï‡∏≤‡∏° Tank ID
func (rmc *RawMilkController) GetRawMilkTankDetails(c *fiber.Ctx) error {
	tankId := c.Params("tankId") // ‚úÖ ‡∏£‡∏±‡∏ö tankId ‡∏à‡∏≤‡∏Å URL Parameter
	fmt.Println("üìå Request received: Fetching milk tank details for:", tankId)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å Blockchain
	rawMilk, err := rmc.BlockchainService.GetRawMilkTankDetails(tankId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch milk tank details:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch milk tank details"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å IPFS ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `QualityReportCID`
	ipfsCID := rawMilk.QualityReportCID
	ipfsData, err := rmc.IPFSService.GetFromIPFS(ipfsCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch data from IPFS:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch quality report from IPFS"})
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON (IPFS)
	var ipfsRawMilkData map[string]interface{}
	err = json.Unmarshal(ipfsData, &ipfsRawMilkData)
	if err != nil {
		fmt.Println("‚ùå Failed to parse IPFS JSON:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Invalid JSON format from IPFS"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `rawMilkData` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	rawMilkData, ok := ipfsRawMilkData["rawMilkData"].(map[string]interface{})
	if !ok {
		fmt.Println("‚ùå Missing rawMilkData in IPFS response")
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Missing raw milk data in IPFS"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `shippingAddress` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var shippingAddress map[string]interface{}
	if rawMilkData["shippingAddress"] != nil {
		shippingAddress, ok = rawMilkData["shippingAddress"].(map[string]interface{})
		if !ok {
			fmt.Println("‚ùå Invalid shippingAddress format in IPFS")
			return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Invalid shipping address format in IPFS"})
		}
	} else {
		shippingAddress = map[string]interface{}{} // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
	}

	// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Panic Error ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á Type
	getString := func(key string, data map[string]interface{}) string {
		if value, ok := data[key].(string); ok {
			return value
		}
		return ""
	}

	getFloat64 := func(key string, data map[string]interface{}) float64 {
		if value, ok := data[key].(float64); ok {
			return value
		}
		return 0.0
	}

	getBool := func(key string, data map[string]interface{}) bool {
		if value, ok := data[key].(bool); ok {
			return value
		}
		return false
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	responseData := fiber.Map{
		"milkTankInfo": fiber.Map{
			"farmName":        getString("farmName", rawMilkData),
			"milkTankNo":      rawMilk.TankId, // ‚úÖ ‡πÉ‡∏ä‡πâ Tank ID ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Blockchain
			"personInCharge":  rawMilk.PersonInCharge,
			"quantity":        getFloat64("quantity", rawMilkData),
			"quantityUnit":    getString("quantityUnit", rawMilkData),
			"temp":            getFloat64("temperature", rawMilkData),
			"tempUnit":        getString("tempUnit", rawMilkData),
			"pH":              getFloat64("pH", rawMilkData),
			"fat":             getFloat64("fat", rawMilkData),
			"protein":         getFloat64("protein", rawMilkData),
			"bacteria":        getBool("bacteria", rawMilkData),
			"bacteriaInfo":    getString("bacteriaInfo", rawMilkData),
			"contaminants":    getBool("contaminants", rawMilkData),
			"contaminantInfo": getString("contaminantInfo", rawMilkData),
			"abnormalChar":    getBool("abnormalChar", rawMilkData),
			"abnormalType":    rawMilkData["abnormalType"], // ‚úÖ ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á Object ‡∏Å‡∏•‡∏±‡∏ö
		},
		"shippingAddress": fiber.Map{
			"companyName": getString("companyName", shippingAddress),
			"firstName":   getString("firstName", shippingAddress),
			"lastName":    getString("lastName", shippingAddress),
			"email":       getString("email", shippingAddress),
			"areaCode":    getString("areaCode", shippingAddress),
			"phoneNumber": getString("phoneNumber", shippingAddress),
			"address":     getString("address", shippingAddress),
			"province":    getString("province", shippingAddress),
			"district":    getString("district", shippingAddress),
			"subDistrict": getString("subDistrict", shippingAddress),
			"postalCode":  getString("postalCode", shippingAddress),
			"location":    getString("location", shippingAddress),
		},
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend
	return c.Status(http.StatusOK).JSON(responseData)
}

func (rmc *RawMilkController) GetQRCodeByTankID(c *fiber.Ctx) error {
	tankId := c.Params("tankId")
	fmt.Println("üìå Fetching QR Code for Tank ID:", tankId)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å Blockchain
	rawMilkData, err := rmc.BlockchainService.GetRawMilkTankDetails(tankId)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch tank details:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch tank details"})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ QR Code CID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if rawMilkData.QrCodeCID == "" {
		fmt.Println("‚ùå QR Code not found for Tank ID:", tankId)
		return c.Status(http.StatusNotFound).JSON(fiber.Map{"error": "QR Code not found"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á QR Code ‡∏à‡∏≤‡∏Å IPFS
	qrCodeBase64, err := rmc.IPFSService.GetImageBase64FromIPFS(rawMilkData.QrCodeCID)
	if err != nil {
		fmt.Println("‚ùå Failed to retrieve QR Code from IPFS:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to retrieve QR Code"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á Base64 QR Code ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Frontend
	return c.JSON(fiber.Map{
		"tankId":    tankId,
		"qrCodeCID": rawMilkData.QrCodeCID,
		"qrCodeImg": fmt.Sprintf("data:image/png;base64,%s", qrCodeBase64),
	})
}
