package controllers

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"time"

	"finalyearproject/Backend/services"

	"github.com/gofiber/fiber/v2"
)

// RawMilkRequest ‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°
type RawMilkRequest struct {
	FarmWallet      string   `json:"farmWallet"`
	FarmName        string   `json:"farmName"`
	MilkTankNum     int      `json:"milkTankNum"`
	PersonInCharge  string   `json:"personInCharge"`
	Quantity        float64  `json:"quantity"`
	QuantityUnit    string   `json:"quantityUnit"`
	Temperature     float64  `json:"temperature"`
	TemperatureUnit string   `json:"temperatureUnit"`
	PH              float64  `json:"pH"`
	Fat             float64  `json:"fat"`
	Protein         float64  `json:"protein"`
	BacteriaTest    string   `json:"bacteriaTest,omitempty"`
	Contaminants    string   `json:"contaminants,omitempty"`
	AbnormalChecks  []string `json:"abnormalChecks,omitempty"`
	Location        string   `json:"location"`
	IPFSCid         string   `json:"ipfsCid"`
}

// generateRawMilkID - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á RawMilkID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
func generateRawMilkID(farmWallet string) string {
	// ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMMDD
	currentDate := time.Now().Format("20060102")

	// ‡πÉ‡∏ä‡πâ SHA-256 Hash ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ID ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
	hashInput := fmt.Sprintf("%s-%s-%d", farmWallet, currentDate, time.Now().UnixNano())
	hash := sha256.Sum256([]byte(hashInput))

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Hash ‡πÄ‡∏õ‡πá‡∏ô Hex ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 16 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
	rawMilkID := hex.EncodeToString(hash[:])[:16] // üõë ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

	return rawMilkID
}

// AddRawMilkHandler ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Blockchain
func AddRawMilkHandler(c *fiber.Ctx) error {
	var request RawMilkRequest

	// ‚úÖ ‡πÉ‡∏ä‡πâ c.BodyParser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á JSON request ‡πÄ‡∏õ‡πá‡∏ô struct
	if err := c.BodyParser(&request); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request format"})
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á RawMilkID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
	rawMilkID := generateRawMilkID(request.FarmWallet)
	fmt.Printf("‚úÖ Generated RawMilkID: %s\n", rawMilkID)

	// ‚úÖ Debug: Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
	fmt.Printf("Received Raw Milk Data: %+v\n", request)

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ BlockchainServiceInstance ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if services.BlockchainServiceInstance == nil {
		log.Println("‚ùå Blockchain service is not initialized")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain service is not initialized"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	txHash, err := services.BlockchainServiceInstance.StoreRawMilkOnBlockchain(
		rawMilkID, // ‚úÖ ‡πÉ‡∏ä‡πâ RawMilkID ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
		request.FarmWallet,
		request.Temperature,
		request.PH,
		request.Fat,
		request.Protein,
		request.IPFSCid,
	)
	if err != nil {
		log.Println("‚ùå Failed to store raw milk on blockchain:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to store raw milk on blockchain"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	return c.JSON(fiber.Map{
		"message":   "Raw milk data stored on blockchain",
		"txHash":    txHash,
		"rawMilkID": rawMilkID, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ RawMilkID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	})
}

// GetRawMilkHandler - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Raw Milk ‡∏à‡∏≤‡∏Å Blockchain
func GetRawMilkHandler(c *fiber.Ctx) error {
	rawMilkID := c.Params("id") // ‚úÖ ‡∏£‡∏±‡∏ö rawMilkID ‡∏à‡∏≤‡∏Å URL

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ BlockchainService ‡∏ñ‡∏π‡∏Å initialize ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if services.BlockchainServiceInstance == nil {
		log.Println("‚ùå Blockchain service is not initialized")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Blockchain service is not initialized"})
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Blockchain
	rawMilk, err := services.BlockchainServiceInstance.GetRawMilkFromBlockchain(rawMilkID)
	if err != nil {
		log.Println("‚ùå Failed to fetch raw milk data:", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to fetch raw milk data"})
	}

	// ‚úÖ ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	return c.JSON(fiber.Map{
		"farmWallet":  rawMilk.FarmWallet,
		"temperature": rawMilk.Temperature,
		"pH":          rawMilk.PH,
		"fat":         rawMilk.Fat,
		"protein":     rawMilk.Protein,
		"ipfsCid":     rawMilk.IPFSCid,
		"status":      rawMilk.Status,
		"timestamp":   rawMilk.Timestamp,
	})
}
