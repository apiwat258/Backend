package routes

import (
	"finalyearproject/Backend/api/controllers"
	"finalyearproject/Backend/middleware"

	"github.com/gofiber/fiber/v2"
)

// SetupRoutes sets up API routes
func SetupRoutes(app *fiber.App, rmc *controllers.RawMilkController, pc *controllers.ProductController, plc *controllers.ProductLotController, tc *controllers.TrackingController) {
	api := app.Group("/api/v1")                              // ‡πÉ‡∏ä‡πâ Prefix "/api/v1" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	api.Get("/tracking-details", tc.GetTrackingDetailsByLot) // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ `api`
	api.Get("/ping", func(c *fiber.Ctx) error {
		return c.SendString("Pong")
	})

	// ‚úÖ Authentication Routes
	auth := api.Group("/auth")
	auth.Post("/update-role", controllers.UpdateUserRole)
	auth.Post("/register", controllers.Register)
	auth.Get("/check-email", controllers.CheckEmailAvailability)
	auth.Post("/login", controllers.Login)
	auth.Post("/logout", controllers.Logout)
	auth.Get("/get-role", controllers.GetUserRole)
	auth.Get("/user-info", middleware.AuthMiddleware(), controllers.GetUserInfo)
	auth.Put("/update-user", middleware.AuthMiddleware(), controllers.UpdateUserInfo)
	auth.Post("/refresh-token", controllers.RefreshTokenHandler)

	protected := api.Group("/protected", middleware.AuthMiddleware())
	protected.Get("/route", controllers.ProtectedRoute)

	farmer := api.Group("/farmers")
	farmer.Post("/create", middleware.AuthMiddleware(), controllers.CreateFarmer)
	farmer.Get("/me", middleware.AuthMiddleware(), controllers.GetFarmByUser)
	farmer.Put("/update", middleware.AuthMiddleware(), controllers.UpdateFarmer)

	factory := api.Group("/factories")
	factory.Post("/", middleware.AuthMiddleware(), controllers.CreateFactory)
	factory.Get("/", middleware.AuthMiddleware(), controllers.GetFactoryByUser)
	factory.Put("/", middleware.AuthMiddleware(), controllers.UpdateFactory)

	logistics := api.Group("/logistics")
	logistics.Post("/", middleware.AuthMiddleware(), controllers.CreateLogistics)
	logistics.Get("/", middleware.AuthMiddleware(), controllers.GetLogisticsByUser)
	logistics.Put("/", middleware.AuthMiddleware(), controllers.UpdateLogistics)

	retailer := api.Group("/retailers")
	retailer.Post("/", middleware.AuthMiddleware(), controllers.CreateRetailer)
	retailer.Get("/", middleware.AuthMiddleware(), controllers.GetRetailerByUser)
	retailer.Put("/", middleware.AuthMiddleware(), controllers.UpdateRetailer)
	retailer.Get("/list", controllers.GetAllRetailers) // ‡∏î‡∏∂‡∏á retailerID ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	retailer.Get("/usernames", controllers.GetRetailerUsernames)
	retailer.Get("/:id", controllers.GetRetailerByID) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° retailerID

	certification := api.Group("/certifications")
	certification.Post("/upload", controllers.UploadCertificate)
	certification.Get("/me", middleware.AuthMiddleware(), controllers.GetCertificationByUser)
	certification.Delete("/", middleware.AuthMiddleware(), controllers.DeleteCertification) // ‚úÖ API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Auth
	certification.Get("/check/:certCID", controllers.CheckCertificationCID)
	certification.Post("/store", middleware.AuthMiddleware(), controllers.StoreCertification)

	// ‚úÖ Milk Tank Routes
	milk := api.Group("/farm/milk", middleware.AuthMiddleware())
	milk.Post("/create", rmc.CreateMilkTank)
	milk.Get("/list", rmc.GetFarmRawMilkTanks)
	milk.Get("/details/:tankId", rmc.GetRawMilkTankDetails)
	milk.Get("/qrcode/:tankId", rmc.GetQRCodeByTankID)
	milk.Get("/generate-tank-id", rmc.GenerateTankID)

	// ‚úÖ Milk Tank Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	factoryMilk := api.Group("/factory/milk", middleware.AuthMiddleware())
	factoryMilk.Get("/list", rmc.GetFactoryRawMilkTanks)
	factoryMilk.Post("/update-status", rmc.UpdateMilkTankStatus)

	// ‚úÖ Product Routes
	product := api.Group("/products", middleware.AuthMiddleware())
	product.Post("/create", pc.CreateProduct)
	product.Get("/list", pc.GetFactoryProducts)
	product.Get("/:productId", pc.GetProductDetails)

	// ‚úÖ Product Lot Routes (‡πÉ‡∏´‡∏°‡πà)
	productLot := api.Group("/product-lots", middleware.AuthMiddleware())
	productLot.Post("/create", plc.CreateProductLot)    // ‚úÖ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Product Lot ‡πÉ‡∏´‡∏°‡πà
	productLot.Get("/list", plc.GetFactoryProductLots)  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Product Lot ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	productLot.Get("/:lotId", plc.GetProductLotDetails) // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Product Lot ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ lotId
	//productLot.Get("/search", plc.SearchProductLot)     // ‚úÖ üîç Search Product Lot (‡πÉ‡∏´‡∏°‡πà)
	productLot.Get("/search-list", plc.GetAllFactoryProductLots) // ‚úÖ üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Factory + Product + ProductLot + Tracking (‡πÉ‡∏´‡∏°‡πà)

	// ‚úÖ ‡∏Å‡∏•‡∏∏‡πà‡∏° Routing ‡∏Ç‡∏≠‡∏á Tracking
	tracking := api.Group("/tracking", middleware.AuthMiddleware())
	tracking.Get("/ids", plc.GetAllTrackingIds)                                     // ‚úÖ ‡∏î‡∏∂‡∏á Tracking ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	tracking.Post("/logistics", plc.UpdateLogisticsCheckpoint)                      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå
	tracking.Get("/logistics/checkpoints", plc.GetLogisticsCheckpointsByTrackingId) // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Checkpoint ‡∏ï‡∏≤‡∏° Tracking ID
	tracking.Get("/retailer", plc.GetRetailerTracking)                              // ‚úÖ ‡∏î‡∏∂‡∏á Tracking IDs ‡∏ï‡∏≤‡∏° Retailer ID
	tracking.Post("/retailer/receive", plc.RetailerReceiveProduct)                  // ‚úÖ Retailer ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	tracking.Get("/retailer/received", plc.GetRetailerReceivedProduct)              // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà Retailer ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
	tracking.Get("/logistics/waiting-pickup", plc.GetLogisticsWaitingForPickup)     // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏à‡∏¥‡∏™
	tracking.Get("/logistics/ongoing", plc.GetOngoingShipmentsByLogistics)          // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏à‡∏¥‡∏™
	tracking.Get("/retailer/intransit", plc.GetRetailerInTransitTracking)           // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á Retailer (InTransit)

}
