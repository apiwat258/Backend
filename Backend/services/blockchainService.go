package services

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"math/big"
	"os"
	"strconv"
	"strings"
	"time"

	// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å external package	"encoding/json"

	// ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á	"encoding/json"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"

	certification "finalyearproject/Backend/services/certification_event" // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Raw Milk
	"finalyearproject/Backend/services/product"
	"finalyearproject/Backend/services/productlot"
	"finalyearproject/Backend/services/rawmilk"
	"finalyearproject/Backend/services/tracking"
	"finalyearproject/Backend/services/userregistry"
)

// BlockchainService - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Blockchain
type BlockchainService struct {
	client                *ethclient.Client
	auth                  *bind.TransactOpts
	userRegistryContract  *userregistry.Userregistry
	certificationContract *certification.Certification
	rawMilkContract       *rawmilk.Rawmilk
	productContract       *product.Product
	productLotContract    *productlot.Productlot
	trackingContract      *tracking.Tracking
}

func getChainID() *big.Int {
	chainIDStr := os.Getenv("GANACHE_CHAIN_ID")
	chainID, err := strconv.ParseInt(chainIDStr, 10, 64)
	if err != nil {
		chainID = 1337 // ‚úÖ ‡∏Ñ‡πà‡∏≤ Default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env
	}
	return big.NewInt(chainID)
}

// BlockchainServiceInstance - Global Instance
var BlockchainServiceInstance *BlockchainService

// InitBlockchainService - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Blockchain ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ
func InitBlockchainService() error {
	fmt.Println("üöÄ Initializing Blockchain Service...")

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ RPC URL ‡∏à‡∏≤‡∏Å ENV
	rpcURL := os.Getenv("BLOCKCHAIN_RPC_URL")
	if rpcURL == "" {
		return fmt.Errorf("‚ùå BLOCKCHAIN_RPC_URL is not set")
	}

	client, err := ethclient.Dial(rpcURL)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to connect to blockchain: %v", err)
	}

	privateKeyHex := os.Getenv("PRIVATE_KEY")
	if privateKeyHex == "" {
		return fmt.Errorf("‚ùå PRIVATE_KEY is not set")
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return fmt.Errorf("‚ùå Invalid private key: %v", err)
	}

	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, big.NewInt(1337))
	if err != nil {
		return fmt.Errorf("‚ùå Failed to create transaction auth: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Smart Contract Address ‡∏à‡∏≤‡∏Å ENV
	certContractAddress := os.Getenv("CERT_CONTRACT_ADDRESS")
	rawMilkContractAddress := os.Getenv("RAWMILK_CONTRACT_ADDRESS")
	userRegistryAddress := os.Getenv("USER_REGISTRY_CONTRACT_ADDRESS")
	productContractAddress := os.Getenv("PRODUCT_CONTRACT_ADDRESS")
	productLotContractAddress := os.Getenv("PRODUCTLOT_CONTRACT_ADDRESS")
	trackingContractAddress := os.Getenv("TRACKING_CONTRACT_ADDRESS")

	if certContractAddress == "" || rawMilkContractAddress == "" || userRegistryAddress == "" || productContractAddress == "" || productLotContractAddress == "" {
		return fmt.Errorf("‚ùå Missing blockchain contract addresses")
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Address ‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô Ethereum Address
	certContractAddr := common.HexToAddress(certContractAddress)
	rawMilkContractAddr := common.HexToAddress(rawMilkContractAddress)
	userRegistryAddr := common.HexToAddress(userRegistryAddress)
	productContractAddr := common.HexToAddress(productContractAddress)
	productLotContractAddr := common.HexToAddress(productLotContractAddress)
	trackingContractAddr := common.HexToAddress(trackingContractAddress)

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Certification Contract
	certInstance, err := certification.NewCertification(certContractAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load certification contract: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î RawMilk Contract
	rawMilkInstance, err := rawmilk.NewRawmilk(rawMilkContractAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load raw milk contract: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î UserRegistry Contract
	userRegistryInstance, err := userregistry.NewUserregistry(userRegistryAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load user registry contract: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Product Contract
	productInstance, err := product.NewProduct(productContractAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load product contract: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î ProductLot Contract
	productLotInstance, err := productlot.NewProductlot(productLotContractAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load product lot contract: %v", err)
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Tracking Contract
	trackingInstance, err := tracking.NewTracking(trackingContractAddr, client)
	if err != nil {
		return fmt.Errorf("‚ùå Failed to load tracking contract: %v", err)
	}

	BlockchainServiceInstance = &BlockchainService{
		client:                client,
		auth:                  auth,
		userRegistryContract:  userRegistryInstance,
		certificationContract: certInstance,
		rawMilkContract:       rawMilkInstance,
		productContract:       productInstance,
		productLotContract:    productLotInstance,
		trackingContract:      trackingInstance,
	}

	fmt.Println("‚úÖ Blockchain Service Initialized!")
	return nil
}

func (b *BlockchainService) getPrivateKeyForAddress(userWallet string) (string, error) {
	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	filePath := "services/private_keys.json"

	// Debug: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô
	absPath, _ := os.Getwd()
	fmt.Println("üìå Looking for private_keys.json at:", absPath+"/"+filePath)

	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		fmt.Println("‚ùå Failed to load private keys file from:", absPath+"/"+filePath)
		return "", errors.New("Failed to load private keys file")
	}
	fmt.Println("‚úÖ Loaded private_keys.json successfully")

	var privateKeys map[string]string
	err = json.Unmarshal(data, &privateKeys)
	if err != nil {
		return "", errors.New("Failed to parse private keys")
	}

	if key, exists := privateKeys[userWallet]; exists {
		return key, nil
	}
	return "", errors.New("Private key not found for address")
}

func (b *BlockchainService) RegisterUserOnBlockchain(userWallet string, role uint8) (string, error) {
	fmt.Println("üìå Registering User on Blockchain:", userWallet, "Role:", role)

	userAddress := common.HexToAddress(userWallet)

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ User ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
	fmt.Println("üìå Checking if user exists on blockchain:", userWallet)
	isRegistered, err := b.CheckUserOnBlockchain(userWallet)
	if err != nil {
		fmt.Println("‚ùå Error checking user registration:", err)
		return "", fmt.Errorf("‚ùå Failed to check user registration: %v", err)
	}
	if isRegistered {
		fmt.Println("‚úÖ User is already registered on blockchain:", userWallet)
		return "", fmt.Errorf("‚ùå User is already registered")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á Wallet ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤‡πÉ‡∏´‡πâ User
	fmt.Println("üìå Fetching Private Key for:", userWallet)
	privateKeyHex, err := b.getPrivateKeyForAddress(userWallet)
	if err != nil {
		fmt.Println("‚ùå Failed to get private key:", err)
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Found:", privateKeyHex[:10]+"...") // ‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏Ñ‡πà 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		fmt.Println("‚ùå Failed to parse private key:", err)
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Parsed Successfully")

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á TransactOpts ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á User
	fmt.Println("üìå Creating Transaction Auth")
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		fmt.Println("‚ùå Failed to create transactor:", err)
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = userAddress
	fmt.Println("‚úÖ Transactor Created - From:", auth.From.Hex())

	// ‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô User ‡πÉ‡∏ô Smart Contract `UserRegistry`
	fmt.Println("üìå Sending Transaction to Register User...")
	tx, err := b.userRegistryContract.RegisterUser(auth, role)
	if err != nil {
		fmt.Println("‚ùå Failed to register user on blockchain:", err)
		return "", err
	}
	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	fmt.Println("üìå Waiting for Transaction to be Mined...")
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		fmt.Println("‚ùå Transaction not mined:", err)
		return "", err
	}

	if receipt.Status == types.ReceiptStatusFailed {
		fmt.Println("‚ùå Transaction failed!")
		return "", errors.New("Transaction failed")
	}

	fmt.Println("‚úÖ User registered on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

func (b *BlockchainService) CheckUserOnBlockchain(userWallet string) (bool, error) {
	fmt.Println("üìå Checking if user exists on blockchain:", userWallet)

	callOpts := &bind.CallOpts{Pending: false, Context: context.Background()}
	userAddress := common.HexToAddress(userWallet)

	isRegistered, err := b.userRegistryContract.IsUserRegistered(callOpts, userAddress)
	if err != nil {
		fmt.Println("‚ùå Failed to check user on blockchain:", err)
		return false, err
	}

	return isRegistered, nil
}

func (b *BlockchainService) StoreCertificationOnBlockchain(walletAddress, eventID, entityType, entityID, certCID string, issuedDate, expiryDate *big.Int) (string, error) {
	fmt.Println("üìå Checking user registration before storing new certification...")

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
	callOpts := &bind.CallOpts{Pending: false, Context: context.Background()}
	isRegistered, err := b.userRegistryContract.IsUserRegistered(callOpts, common.HexToAddress(walletAddress))
	if err != nil {
		fmt.Println("‚ùå Failed to check user registration:", err)
		return "", err
	}
	if !isRegistered {
		fmt.Println("‚ùå User is not registered in the system")
		return "", errors.New("User is not registered in the system")
	}

	fmt.Println("üìå Fetching Private Key for:", walletAddress)

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á User ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
	privateKeyHex, err := b.getPrivateKeyForAddress(walletAddress)
	if err != nil {
		fmt.Println("‚ùå Failed to get private key:", err)
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Found:", privateKeyHex[:10]+"...")

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		fmt.Println("‚ùå Failed to parse private key:", err)
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Parsed Successfully")

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `auth` ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á User
	fmt.Println("üìå Creating Transaction Auth for:", walletAddress)
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		fmt.Println("‚ùå Failed to create transactor:", err)
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(walletAddress) // ‚úÖ ‡πÉ‡∏ä‡πâ Wallet Address ‡∏Ç‡∏≠‡∏á User
	fmt.Println("‚úÖ Transactor Created - From:", auth.From.Hex())

	fmt.Println("üìå Storing new certification on Blockchain...")

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Smart Contract
	tx, err := b.certificationContract.StoreCertificationEvent(
		auth,
		eventID,
		entityType,
		entityID,
		certCID,
		issuedDate,
		expiryDate,
	)
	if err != nil {
		fmt.Println("‚ùå Failed to store certification event on blockchain:", err)
		return "", err
	}

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å Mine
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		fmt.Println("‚ùå Transaction not mined:", err)
		return "", err
	}
	if receipt.Status == types.ReceiptStatusFailed {
		fmt.Println("‚ùå Transaction failed!")
		return "", errors.New("Transaction failed")
	}

	fmt.Println("‚úÖ Certification Event stored on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

func (b *BlockchainService) DeactivateCertificationOnBlockchain(walletAddress, eventID string) (string, error) {
	fmt.Println("üìå [Blockchain] Deactivating certification for Wallet:", walletAddress, "EventID:", eventID)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `walletAddress` ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô Blockchain ‡πÅ‡∏•‡πâ‡∏ß
	callOpts := &bind.CallOpts{Pending: false, Context: context.Background()}
	isRegistered, err := b.userRegistryContract.IsUserRegistered(callOpts, common.HexToAddress(walletAddress))
	if err != nil {
		fmt.Println("‚ùå Failed to check user registration:", err)
		return "", err
	}
	if !isRegistered {
		fmt.Println("‚ùå User is not registered in the system")
		return "", errors.New("User is not registered in the system")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á User ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
	fmt.Println("üìå Fetching Private Key for:", walletAddress)
	privateKeyHex, err := b.getPrivateKeyForAddress(walletAddress)
	if err != nil {
		fmt.Println("‚ùå Failed to get private key:", err)
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Found:", privateKeyHex[:10]+"...")

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		fmt.Println("‚ùå Failed to parse private key:", err)
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}
	fmt.Println("‚úÖ Private Key Parsed Successfully")

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `auth` ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á User
	fmt.Println("üìå Creating Transaction Auth for:", walletAddress)
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		fmt.Println("‚ùå Failed to create transactor:", err)
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(walletAddress) // ‚úÖ ‡πÉ‡∏ä‡πâ Wallet Address ‡∏Ç‡∏≠‡∏á User
	fmt.Println("‚úÖ Transactor Created - From:", auth.From.Hex())

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	tx, err := b.certificationContract.DeactivateCertificationEvent(auth, eventID)
	if err != nil {
		log.Println("‚ùå [Blockchain] Failed to deactivate certification event on blockchain:", err)
		return "", err
	}

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å Mine
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		log.Println("‚ùå [Blockchain] Transaction not mined:", err)
		return "", err
	}
	if receipt.Status == types.ReceiptStatusFailed {
		log.Println("‚ùå [Blockchain] Transaction failed!")
		return "", errors.New("transaction failed")
	}

	fmt.Println("‚úÖ [Blockchain] Certification Event deactivated on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

func (b *BlockchainService) GetAllCertificationsForEntity(entityID string) ([]certification.CertificationEventCertEvent, error) {
	callOpts := &bind.CallOpts{
		Pending: false,
		Context: context.Background(),
	}

	fmt.Println("üìå Fetching active certifications for entity:", entityID)

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Smart Contract
	certs, err := b.certificationContract.GetActiveCertificationsForEntity(callOpts, entityID)
	if err != nil {
		log.Println("‚ùå Failed to fetch certifications from blockchain:", err)
		return nil, err
	}

	// ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢ -> ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô [] ‡πÅ‡∏ó‡∏ô nil ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Panic
	if len(certs) == 0 {
		fmt.Println("üìå No certifications found for entity:", entityID)
		return []certification.CertificationEventCertEvent{}, nil
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á `isActive == true`
	var activeCerts []certification.CertificationEventCertEvent
	for _, cert := range certs {
		if cert.IsActive {
			activeCerts = append(activeCerts, cert)
		}
	}

	fmt.Println("‚úÖ Retrieved active certifications from blockchain:", len(activeCerts))
	return activeCerts, nil
}

func (b *BlockchainService) CheckUserCertification(certCID string) (bool, error) {
	fmt.Println("üìå Checking if Certification CID is unique:", certCID)

	callOpts := &bind.CallOpts{Pending: false, Context: context.Background()}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏ó‡∏∏‡∏Å‡πÉ‡∏ö‡πÄ‡∏ã‡∏≠‡∏£‡πå" ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Blockchain
	allCerts, err := b.certificationContract.GetAllCertifications(callOpts)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch all certifications:", err)
		return false, err
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CID ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	for _, cert := range allCerts {
		if cert.CertificationCID == certCID {
			fmt.Println("‚ùå Certification CID already exists on blockchain:", cert.EventID)
			return false, nil
		}
	}

	fmt.Println("‚úÖ Certification CID is unique, can be stored")
	return true, nil
}

// //////////////////////////////////////////////////////////// RawMilk /////////////////////////////////////////////////////////
// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Struct `RawMilkData` ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `qualityReportCID`
type RawMilkData struct {
	TankId           string `json:"tankId"`
	FarmWallet       string `json:"farmWallet"`
	FactoryId        string `json:"factoryId"`
	PersonInCharge   string `json:"personInCharge"`
	QualityReportCID string `json:"qualityReportCid"` // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
	QrCodeCID        string `json:"qrCodeCid"`
	Status           uint8  `json:"status"`
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πâ‡∏á‡∏Ñ‡πå‡∏ô‡∏°‡∏ö‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Debug Log)
func (b *BlockchainService) CreateMilkTank(
	userWallet string,
	tankId string,
	factoryId string,
	personInCharge string,
	qualityReportCID string,
	qrCodeCID string,
) (string, error) {

	fmt.Println("üìå Creating Milk Tank on Blockchain for:", userWallet)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
	err := validateMilkTankData(userWallet, tankId, factoryId, personInCharge, qualityReportCID, qrCodeCID)
	if err != nil {
		return "", err
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á Wallet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
	privateKeyHex, err := b.getPrivateKeyForAddress(userWallet)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(userWallet)
	auth.GasLimit = uint64(3000000)         // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Gas Limit
	auth.GasPrice = big.NewInt(20000000000) // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Gas Price

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `tankId` ‡πÅ‡∏•‡∏∞ `factoryId` ‡πÄ‡∏õ‡πá‡∏ô `bytes32`
	tankIdBytes := common.BytesToHash([]byte(tankId))
	factoryIdBytes := common.BytesToHash([]byte(factoryId))

	// ‚úÖ Debug Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	fmt.Println("üìå Debug - Sending to Blockchain:")
	fmt.Println("   - Tank ID (Bytes32):", tankIdBytes)
	fmt.Println("   - Factory ID (Bytes32):", factoryIdBytes)
	fmt.Println("   - Person In Charge:", personInCharge)
	fmt.Println("   - Quality Report CID:", qualityReportCID)
	fmt.Println("   - QR Code CID:", qrCodeCID)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Smart Contract
	tx, err := b.rawMilkContract.CreateMilkTank(
		auth,
		tankIdBytes,
		factoryIdBytes,
		personInCharge,
		qualityReportCID,
		qrCodeCID,
	)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create milk tank on blockchain: %v", err)
	}

	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		return "", fmt.Errorf("‚ùå Transaction not mined: %v", err)
	}

	if receipt.Status == types.ReceiptStatusFailed {
		return "", errors.New("‚ùå Transaction failed")
	}

	fmt.Println("‚úÖ Milk Tank Created on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (‡πÅ‡∏Å‡πâ `factoryId` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô `bytes32`)
func validateMilkTankData(userWallet, tankId, factoryId, personInCharge, qualityReportCID, qrCodeCID string) error {
	if userWallet == "" {
		return errors.New("‚ùå userWallet is required")
	}
	if !common.IsHexAddress(userWallet) {
		return errors.New("‚ùå userWallet is not a valid Ethereum address")
	}
	if tankId == "" {
		return errors.New("‚ùå tankId is required")
	}
	if factoryId == "" {
		return errors.New("‚ùå factoryId is required")
	}
	if personInCharge == "" {
		return errors.New("‚ùå personInCharge is required")
	}
	if qualityReportCID == "" {
		return errors.New("‚ùå qualityReportCID is required")
	}
	if qrCodeCID == "" {
		return errors.New("‚ùå qrCodeCID is required")
	}
	return nil
}

func (b *BlockchainService) GetMilkTanksByFarmer(farmerAddress string) ([]map[string]interface{}, error) {
	fmt.Println("üìå Fetching milk tanks for farmer:", farmerAddress)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô Ethereum Address
	farmer := common.HexToAddress(farmerAddress)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Tank IDs ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Smart Contract
	tankIDs, histories, err := b.rawMilkContract.GetMilkTanksByFarmer(&bind.CallOpts{}, farmer)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch milk tanks for farmer:", err)
		return nil, err
	}

	var milkTanks []map[string]interface{}

	// ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå
	for i, id := range tankIDs {
		tankIdStr := string(bytes.Trim(id[:], "\x00"))

		// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
		latestEntry := histories[i][len(histories[i])-1]

		// ‚úÖ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ OLDPERSONINCHARGE (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
		var oldPersonInCharge string
		if len(histories[i]) > 1 {
			oldPersonInCharge = histories[i][len(histories[i])-2].PersonInCharge
		} else {
			oldPersonInCharge = latestEntry.PersonInCharge // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		}

		milkTank := map[string]interface{}{
			"tankId":            tankIdStr,
			"personInCharge":    latestEntry.PersonInCharge,
			"oldPersonInCharge": oldPersonInCharge,
			"status":            uint8(latestEntry.Status),
		}

		milkTanks = append(milkTanks, milkTank)
	}

	fmt.Println("‚úÖ Fetched milk tanks for farmer (All statuses):", farmerAddress, milkTanks)
	return milkTanks, nil
}

func (b *BlockchainService) GetRawMilkTankDetails(tankId string) (*RawMilkData, []map[string]interface{}, error) {
	fmt.Println("üìå Fetching milk tank details for:", tankId)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á tankId ‡πÄ‡∏õ‡πá‡∏ô bytes32
	tankIdBytes := common.BytesToHash([]byte(tankId))

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å Smart Contract
	milkTankData, err := b.rawMilkContract.GetMilkTank(&bind.CallOpts{}, tankIdBytes)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch milk tank details:", err)
		return nil, nil, fmt.Errorf("‚ùå Failed to fetch milk tank details: %v", err)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ tankId ‡πÅ‡∏•‡∏∞ factoryId ‡πÄ‡∏õ‡πá‡∏ô string
	tankIdStr := string(bytes.Trim(milkTankData.TankId[:], "\x00"))
	factoryIdStr := string(bytes.Trim(milkTankData.FactoryId[:], "\x00"))

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á `RawMilkData`
	rawMilk := &RawMilkData{
		TankId:           tankIdStr,
		FarmWallet:       milkTankData.Farmer.Hex(),
		FactoryId:        factoryIdStr,
		PersonInCharge:   milkTankData.PersonInCharge,
		QualityReportCID: milkTankData.QualityReportCID,
		QrCodeCID:        milkTankData.QrCodeCID,
		Status:           uint8(milkTankData.Status),
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å Smart Contract
	historyData := milkTankData.History // `History` ‡∏°‡∏≤‡∏à‡∏≤‡∏Å `MilkTankWithHistory`

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
	var historyList []map[string]interface{}
	for _, entry := range historyData {
		historyList = append(historyList, map[string]interface{}{
			"personInCharge":   entry.PersonInCharge,
			"qualityReportCID": entry.QualityReportCID,
			"status":           uint8(entry.Status),
			"timestamp":        entry.Timestamp,
		})
	}

	fmt.Println("‚úÖ Milk Tank Details Retrieved:", rawMilk)
	fmt.Println("‚úÖ Milk Tank History Retrieved:", historyList)
	return rawMilk, historyList, nil
}

func (b *BlockchainService) GetMilkTanksByFactory(factoryID string) ([]map[string]interface{}, error) {
	fmt.Println("üìå Fetching milk tanks for factory:", factoryID)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á FactoryID ‡πÄ‡∏õ‡πá‡∏ô bytes32
	factoryIDBytes32 := common.BytesToHash([]byte(factoryID))
	fmt.Println("üîç [Fixed] Converted FactoryID to Bytes32:", factoryIDBytes32)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Tank IDs ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Smart Contract
	tankIDs, histories, err := b.rawMilkContract.GetMilkTanksByFactory(&bind.CallOpts{}, factoryIDBytes32)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch milk tanks for factory:", err)
		return nil, err
	}

	var milkTanks []map[string]interface{}

	// ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏á‡∏Å‡πå
	for i, id := range tankIDs {
		tankIdStr := string(bytes.Trim(id[:], "\x00"))

		// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏≠‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô Array)
		latestEntry := histories[i][len(histories[i])-1]

		// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Response ‡∏ó‡∏µ‡πà‡∏°‡∏µ `tankId`, `personInCharge`, `status` (‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
		milkTank := map[string]interface{}{
			"tankId":         tankIdStr,
			"personInCharge": latestEntry.PersonInCharge,
			"status":         uint8(latestEntry.Status),
		}

		milkTanks = append(milkTanks, milkTank)
	}

	fmt.Println("‚úÖ Fetched all milk tanks for factory:", factoryID, milkTanks)
	return milkTanks, nil
}

func (b *BlockchainService) UpdateMilkTankStatus(
	factoryWallet string,
	tankId string,
	approved bool, // ‚úÖ true = Approved, false = Rejected
	personInCharge string,
	qualityReportCID string,
) (string, error) {

	fmt.Println("üìå Updating Milk Tank Status on Blockchain for Factory:", factoryWallet)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
	if factoryWallet == "" || tankId == "" || personInCharge == "" || qualityReportCID == "" {
		return "", fmt.Errorf("‚ùå Missing required fields")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á Wallet ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	privateKeyHex, err := b.getPrivateKeyForAddress(factoryWallet)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(factoryWallet)
	auth.GasLimit = uint64(3000000)         // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Gas Limit
	auth.GasPrice = big.NewInt(20000000000) // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Gas Price

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `tankId` ‡πÄ‡∏õ‡πá‡∏ô `bytes32`
	tankIdBytes := common.BytesToHash([]byte(tankId))

	// ‚úÖ Debug Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	fmt.Println("üìå Debug - Sending to Blockchain:")
	fmt.Println("   - Tank ID (Bytes32):", tankIdBytes)
	fmt.Println("   - Person In Charge:", personInCharge)
	fmt.Println("   - Approved:", approved)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Smart Contract
	tx, err := b.rawMilkContract.VerifyMilkQuality(
		auth,
		tankIdBytes, // ‚úÖ ‡πÉ‡∏ä‡πâ [32]byte
		approved,    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô Approved ‡∏´‡∏£‡∏∑‡∏≠ Rejected
		qualityReportCID,
		personInCharge,
	)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to update milk tank status on blockchain: %v", err)
	}

	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		return "", fmt.Errorf("‚ùå Transaction not mined: %v", err)
	}

	if receipt.Status == types.ReceiptStatusFailed {
		return "", errors.New("‚ùå Transaction failed")
	}

	fmt.Println("‚úÖ Milk Tank Status Updated on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

// //////////////////////////////////////////////////////////// Product /////////////////////////////////////////////////////////
// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Product ‡∏ö‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Product ‡∏ö‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô
func (b *BlockchainService) CreateProduct(
	userWallet string,
	productId string,
	productName string,
	productCID string,
	category string,
) (string, error) {

	fmt.Println("üìå Creating Product on Blockchain for Wallet:", userWallet)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
	err := validateProductData(userWallet, productId, productName, productCID, category)
	if err != nil {
		return "", err
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á Wallet
	privateKeyHex, err := b.getPrivateKeyForAddress(userWallet)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Auth
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(userWallet)
	auth.GasLimit = uint64(3000000)
	auth.GasPrice = big.NewInt(20000000000)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `productId` ‡πÄ‡∏õ‡πá‡∏ô `[32]byte` ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö `tankId`
	productIdBytes := common.BytesToHash([]byte(productId))

	// ‚úÖ Debug Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	fmt.Println("üìå Debug - Sending to Blockchain:")
	fmt.Println("   - Product ID (Bytes32):", productIdBytes) // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0x...
	fmt.Println("   - Product Name:", productName)
	fmt.Println("   - Product CID:", productCID)
	fmt.Println("   - Category:", category)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Smart Contract
	tx, err := b.productContract.CreateProduct(
		auth,
		productIdBytes, // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô `common.Hash`
		productName,
		productCID,
		category,
	)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create product on blockchain: %v", err)
	}

	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		return "", fmt.Errorf("‚ùå Transaction not mined: %v", err)
	}

	if receipt.Status == types.ReceiptStatusFailed {
		return "", errors.New("‚ùå Transaction failed")
	}

	fmt.Println("‚úÖ Product Created on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

func validateProductData(factoryWallet, productId, productName, productCID, category string) error {
	if factoryWallet == "" {
		return errors.New("‚ùå factoryWallet is required")
	}
	if !common.IsHexAddress(factoryWallet) {
		return errors.New("‚ùå factoryWallet is not a valid Ethereum address")
	}
	if productId == "" {
		return errors.New("‚ùå productId is required")
	}
	if productName == "" {
		return errors.New("‚ùå productName is required")
	}
	if productCID == "" {
		return errors.New("‚ùå productCID is required")
	}
	if category == "" {
		return errors.New("‚ùå category is required")
	}
	return nil
}

func (b *BlockchainService) GetProductsByFactory(factoryAddress string) ([]map[string]interface{}, error) {
	fmt.Println("üìå Fetching products for factory:", factoryAddress)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô Ethereum Address
	factory := common.HexToAddress(factoryAddress)

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å Smart Contract
	ids, names, categories, err := b.productContract.GetProductsByFactory(&bind.CallOpts{From: factory})
	if err != nil {
		fmt.Println("‚ùå Failed to fetch products:", err)
		return nil, err
	}

	var products []map[string]interface{}

	// ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Product ‡πÅ‡∏•‡∏∞‡∏•‡∏ö NULL Characters (`\x00`)
	for i := range ids {
		productIdStr := string(bytes.Trim(ids[i][:], "\x00"))

		product := map[string]interface{}{
			"productId":   productIdStr,
			"productName": names[i],
			"category":    categories[i],
			"detailsLink": fmt.Sprintf("/Factory/ProductDetails/%s", productIdStr),
		}
		products = append(products, product)
	}

	fmt.Println("‚úÖ Fetched products for factory:", products)
	return products, nil
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° Product ID
func (b *BlockchainService) GetProductDetails(productId string) (map[string]interface{}, error) {
	fmt.Println("üìå Fetching product details:", productId)

	// ‚úÖ ‡πÉ‡∏ä‡πâ `common.BytesToHash([]byte(productId))` ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	productIdBytes := common.BytesToHash([]byte(productId))

	productData, err := b.productContract.GetProductDetails(&bind.CallOpts{}, productIdBytes)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch product details:", err)
		return nil, err
	}

	product := map[string]interface{}{
		"productId":     strings.TrimRight(string(productData.ProductId[:]), "\x00"),
		"factoryWallet": productData.FactoryWallet.Hex(),
		"productName":   productData.ProductName,
		"productCID":    productData.ProductCID,
		"category":      productData.Category,
	}

	fmt.Println("‚úÖ Product details fetched successfully:", product)
	return product, nil
}

// //////////////////////////////////////////////////////////// ProductLot /////////////////////////////////////////////////////////

type ProductLotInfo struct {
	LotID                  string
	ProductID              string
	Factory                string
	Inspector              string
	InspectionDate         time.Time
	Grade                  bool
	QualityAndNutritionCID string
	MilkTankIDs            []string
}

func (b *BlockchainService) CreateProductLot(
	userWallet string,
	lotId string,
	productId string,
	inspector string,
	grade bool,
	qualityAndNutritionCID string,
	milkTankIds []string,
) (string, error) {

	fmt.Println("üìå Creating Product Lot on Blockchain for:", userWallet)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
	err := validateProductLotData(userWallet, lotId, productId, inspector, strconv.FormatBool(grade), qualityAndNutritionCID, milkTankIds)
	if err != nil {
		return "", err
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á Wallet ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	privateKeyHex, err := b.getPrivateKeyForAddress(userWallet)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(userWallet)
	auth.GasLimit = uint64(3000000)
	auth.GasPrice = big.NewInt(20000000000)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `lotId` ‡πÅ‡∏•‡∏∞ `productId` ‡πÄ‡∏õ‡πá‡∏ô `bytes32`
	lotIdBytes := common.BytesToHash([]byte(lotId))
	productIdBytes := common.BytesToHash([]byte(productId))

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `milkTankIds` ‡πÄ‡∏õ‡πá‡∏ô `[][32]byte`
	var milkTankBytes [][32]byte
	for _, tankId := range milkTankIds {
		tankBytes := common.BytesToHash([]byte(tankId)) // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Milk Tank
		milkTankBytes = append(milkTankBytes, tankBytes)
	}

	// ‚úÖ Debug Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	fmt.Println("üìå Debug - Sending to Blockchain:")
	fmt.Println("   - Lot ID (Bytes32):", lotIdBytes)
	fmt.Println("   - Product ID (Bytes32):", productIdBytes)
	fmt.Println("   - Inspector:", inspector)
	fmt.Println("   - Inspection Date:", time.Now().Unix()) // ‡πÉ‡∏ä‡πâ timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	fmt.Println("   - Grade:", grade)
	fmt.Println("   - Quality & Nutrition CID:", qualityAndNutritionCID)
	fmt.Println("   - Milk Tanks:", milkTankBytes)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Smart Contract
	tx, err := b.productLotContract.CreateProductLot(
		auth,
		lotIdBytes,
		productIdBytes,
		inspector,
		grade,
		qualityAndNutritionCID,
		milkTankBytes,
	)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create product lot on blockchain: %v", err)
	}

	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		return "", fmt.Errorf("‚ùå Transaction not mined: %v", err)
	}

	if receipt.Status == types.ReceiptStatusFailed {
		return "", errors.New("‚ùå Transaction failed")
	}

	fmt.Println("‚úÖ Product Lot Created on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
func validateProductLotData(userWallet, lotId, productId, inspector, grade, qualityAndNutritionCID string, milkTankIds []string) error {
	if userWallet == "" {
		return errors.New("‚ùå userWallet is required")
	}
	if !common.IsHexAddress(userWallet) {
		return errors.New("‚ùå userWallet is not a valid Ethereum address")
	}
	if lotId == "" {
		return errors.New("‚ùå lotId is required")
	}
	if productId == "" {
		return errors.New("‚ùå productId is required")
	}
	if inspector == "" {
		return errors.New("‚ùå inspector is required")
	}
	if grade == "" {
		return errors.New("‚ùå grade is required")
	}
	if qualityAndNutritionCID == "" {
		return errors.New("‚ùå qualityAndNutritionCID is required")
	}
	if len(milkTankIds) == 0 {
		return errors.New("‚ùå milkTankIds cannot be empty")
	}
	return nil
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot ‡∏ï‡∏≤‡∏° `productId`
func (b *BlockchainService) GetProductLotByLotID(lotId string) (*ProductLotInfo, error) {
	fmt.Println("üìå Fetching Product Lot for Lot ID:", lotId)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `lotId` ‡πÄ‡∏õ‡πá‡∏ô `bytes32`
	lotIdBytes := common.BytesToHash([]byte(lotId))

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Smart Contract ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
	productLotData, err := b.productLotContract.GetProductLot(nil, lotIdBytes)
	if err != nil {
		return nil, fmt.Errorf("‚ùå Failed to fetch Product Lot: %v", err)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Smart Contract ‡πÄ‡∏õ‡πá‡∏ô Struct
	result := &ProductLotInfo{
		LotID:                  string(bytes.Trim(productLotData.LotId[:], "\x00")),
		ProductID:              string(bytes.Trim(productLotData.ProductId[:], "\x00")),
		Factory:                productLotData.Factory.Hex(),
		Inspector:              productLotData.Inspector,
		InspectionDate:         time.Unix(productLotData.InspectionDate.Int64(), 0),
		Grade:                  productLotData.Grade,
		QualityAndNutritionCID: productLotData.QualityAndNutritionCID,
		MilkTankIDs:            convertBytes32ArrayToStrings(productLotData.MilkTankIds),
	}

	fmt.Println("‚úÖ Product Lot Found:", result)
	return result, nil
}

// ‚úÖ ‡∏î‡∏∂‡∏á Product Lots ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
func (b *BlockchainService) GetProductLotsByFactory(factoryAddress string) ([]map[string]string, error) {
	fmt.Println("üìå Fetching Product Lots for Factory:", factoryAddress)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Address
	factoryAddr := common.HexToAddress(factoryAddress)

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Smart Contract ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Lot IDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	lotIds, err := b.productLotContract.GetProductLotsByFactory(nil, factoryAddr)
	if err != nil {
		return nil, fmt.Errorf("‚ùå Failed to fetch Product Lots: %v", err)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `bytes32[]` ‡πÄ‡∏õ‡πá‡∏ô `[]string`
	lotIdStrings := convertBytes32ArrayToStrings(lotIds)

	// ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	var productLots []map[string]string

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Product Lot
	for _, lotId := range lotIdStrings {
		// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Lot ‡∏à‡∏≤‡∏Å Blockchain
		productLotData, err := b.GetProductLotByLotID(lotId)
		if err != nil {
			fmt.Println("‚ùå Failed to fetch Product Lot:", lotId, err)
			continue // ‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
		}

		// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product Name ‡∏à‡∏≤‡∏Å Smart Contract
		productID := productLotData.ProductID
		productData, err := b.GetProductDetails(productID)
		if err != nil {
			fmt.Println("‚ùå Failed to fetch Product Name for Product ID:", productID, err)
			continue // ‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
		}

		// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
		productLots = append(productLots, map[string]string{
			"Product Lot No":   lotId,
			"Product Name":     productData["productName"].(string),
			"Person In Charge": productLotData.Inspector, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Inspector
		})
	}

	fmt.Println("‚úÖ Product Lots Fetched Successfully:", productLots)
	return productLots, nil
}

// ‚úÖ Helper Function: ‡πÅ‡∏õ‡∏•‡∏á `bytes32[]` ‡πÄ‡∏õ‡πá‡∏ô `[]string`
func convertBytes32ArrayToStrings(arr [][32]byte) []string {
	var result []string
	for _, item := range arr {
		result = append(result, string(bytes.Trim(item[:], "\x00"))) // ‡∏•‡∏ö NULL Bytes
	}
	return result
}

// //////////////////////////////////////////////////////////// Tracking Event /////////////////////////////////////////////////////////
// CreateTrackingEvent - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡∏£‡∏Ñ‡∏Å‡∏¥‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡πå
func (b *BlockchainService) CreateTrackingEvent(
	userWallet string,
	trackingId string,
	productLotId string,
	retailerId string,
	qrCodeCID string,
) (string, error) {

	fmt.Println("üìå Creating Tracking Event on Blockchain for:", userWallet)

	// ‚úÖ ‡∏î‡∏∂‡∏á Private Key ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	privateKeyHex, err := b.getPrivateKeyForAddress(userWallet)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to get private key: %v", err)
	}

	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to parse private key: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Private Key ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, getChainID())
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create transactor: %v", err)
	}
	auth.From = common.HexToAddress(userWallet)
	auth.GasLimit = uint64(3000000)
	auth.GasPrice = big.NewInt(20000000000)

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `trackingId` ‡πÅ‡∏•‡∏∞ `productLotId` ‡πÄ‡∏õ‡πá‡∏ô `bytes32`
	trackingIdBytes := common.BytesToHash([]byte(trackingId))
	productLotIdBytes := common.BytesToHash([]byte(productLotId))

	// ‚úÖ Debug Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blockchain
	fmt.Println("üìå Debug - Sending to Blockchain:")
	fmt.Println("   - Tracking ID (Bytes32):", trackingIdBytes)
	fmt.Println("   - Product Lot ID (Bytes32):", productLotIdBytes)
	fmt.Println("   - Retailer ID:", retailerId)
	fmt.Println("   - QR Code CID:", qrCodeCID)

	// ‚úÖ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà Smart Contract
	tx, err := b.trackingContract.CreateTrackingEvent(
		auth,
		trackingIdBytes,
		productLotIdBytes,
		retailerId,
		qrCodeCID,
	)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create tracking event on blockchain: %v", err)
	}

	fmt.Println("‚úÖ Transaction Sent:", tx.Hash().Hex())

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Transaction ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
	receipt, err := bind.WaitMined(context.Background(), b.client, tx)
	if err != nil {
		return "", fmt.Errorf("‚ùå Transaction not mined: %v", err)
	}

	if receipt.Status == types.ReceiptStatusFailed {
		return "", errors.New("‚ùå Transaction failed")
	}

	fmt.Println("‚úÖ Tracking Event Created on Blockchain:", tx.Hash().Hex())
	return tx.Hash().Hex(), nil
}
