package services

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"image"
	_ "image/jpeg" // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPEG
	_ "image/png"
	"os"

	gozxing "github.com/makiuchi-d/gozxing"
	gozxingqrcode "github.com/makiuchi-d/gozxing/qrcode" // üìå ‡∏ï‡∏±‡πâ‡∏á alias ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
	goqrcode "github.com/skip2/go-qrcode"
)

var QRCodeServiceInstance = &QRCodeService{}

// QRCodeService ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
type QRCodeService struct {
	IPFSService *IPFSService
}

// NewQRCodeService ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á QRCodeService
func NewQRCodeService(ipfsService *IPFSService) *QRCodeService {
	return &QRCodeService{
		IPFSService: ipfsService,
	}
}

// GenerateQRCode ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å Tank ID ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
func (qrs *QRCodeService) GenerateQRCode(tankID string) (string, error) {
	fmt.Println("üìå Generating QR Code for Tank ID:", tankID)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFSService ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if qrs.IPFSService == nil {
		fmt.Println("‚ùå IPFS Service is not initialized")
		return "", fmt.Errorf("IPFS Service is not initialized")
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô PNG
	qrCode, err := goqrcode.Encode(tankID, goqrcode.Medium, 256)
	if err != nil {
		fmt.Println("‚ùå Failed to generate QR Code:", err)
		return "", fmt.Errorf("Failed to generate QR Code: %v", err)
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
	tempFilePath := fmt.Sprintf("/tmp/qrcode_%s.png", tankID)
	err = os.WriteFile(tempFilePath, qrCode, 0644)
	if err != nil {
		fmt.Println("‚ùå Failed to save QR Code to file:", err)
		return "", fmt.Errorf("Failed to save QR Code to file: %v", err)
	}
	defer os.Remove(tempFilePath)

	// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
	file, err := os.Open(tempFilePath)
	if err != nil {
		fmt.Println("‚ùå Failed to open QR Code file:", err)
		return "", fmt.Errorf("Failed to open QR Code file: %v", err)
	}
	defer file.Close()

	// ‚úÖ ‡πÉ‡∏ä‡πâ IPFSServiceInstance ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	qrCodeCID, err := qrs.IPFSService.UploadFile(file)
	if err != nil {
		fmt.Println("‚ùå Failed to upload QR Code to IPFS:", err)
		return "", fmt.Errorf("Failed to upload QR Code to IPFS: %v", err)
	}

	fmt.Println("‚úÖ QR Code uploaded to IPFS with CID:", qrCodeCID)
	return qrCodeCID, nil
}

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ JSON ‡πÅ‡∏ó‡∏ô `tankID`
func (qrs *QRCodeService) GenerateQRCodeforFactory(qrData string) (string, error) {
	fmt.Println("üìå Generating QR Code for:", qrData)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFSService ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if qrs.IPFSService == nil {
		fmt.Println("‚ùå IPFS Service is not initialized")
		return "", fmt.Errorf("IPFS Service is not initialized")
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Struct ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á `trackingId`
	var qrDataMap map[string]interface{}
	if err := json.Unmarshal([]byte(qrData), &qrDataMap); err != nil {
		fmt.Println("‚ùå Failed to parse QR data JSON:", err)
		return "", fmt.Errorf("Failed to parse QR data JSON: %v", err)
	}

	trackingID, ok := qrDataMap["trackingId"].(string)
	if !ok || trackingID == "" {
		fmt.Println("‚ùå Missing trackingId in QR data")
		return "", errors.New("missing trackingId in QR data")
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô PNG (‡πÉ‡∏ä‡πâ JSON Object ‡πÅ‡∏ó‡∏ô `tankID`)
	qrCode, err := goqrcode.Encode(qrData, goqrcode.Medium, 256)
	if err != nil {
		fmt.Println("‚ùå Failed to generate QR Code:", err)
		return "", fmt.Errorf("Failed to generate QR Code: %v", err)
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ `trackingId` ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå QR Code
	tempFilePath := fmt.Sprintf("/tmp/qrcode_%s.png", trackingID)
	err = os.WriteFile(tempFilePath, qrCode, 0644)
	if err != nil {
		fmt.Println("‚ùå Failed to save QR Code to file:", err)
		return "", fmt.Errorf("Failed to save QR Code to file: %v", err)
	}
	defer os.Remove(tempFilePath)

	// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
	file, err := os.Open(tempFilePath)
	if err != nil {
		fmt.Println("‚ùå Failed to open QR Code file:", err)
		return "", fmt.Errorf("Failed to open QR Code file: %v", err)
	}
	defer file.Close()

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå QR Code ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
	qrCodeCID, err := qrs.IPFSService.UploadFile(file)
	if err != nil {
		fmt.Println("‚ùå Failed to upload QR Code to IPFS:", err)
		return "", fmt.Errorf("Failed to upload QR Code to IPFS: %v", err)
	}

	fmt.Println("‚úÖ QR Code uploaded to IPFS with CID:", qrCodeCID)
	return qrCodeCID, nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏à‡∏≤‡∏Å Base64
func (qrs *QRCodeService) ReadQRCodeFromBase64(base64Image string) (string, error) {
	// ‚úÖ Decode Base64 ‡πÄ‡∏õ‡πá‡∏ô Byte
	imageData, err := base64.StdEncoding.DecodeString(base64Image)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to decode Base64 image: %v", err)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Byte ‡πÄ‡∏õ‡πá‡∏ô Image
	img, _, err := image.Decode(bytes.NewReader(imageData))
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to decode image: %v", err)
	}

	// ‚úÖ ‡πÉ‡∏ä‡πâ gozxing ‡∏≠‡πà‡∏≤‡∏ô QR Code
	bmp, err := gozxing.NewBinaryBitmapFromImage(img)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to create binary bitmap: %v", err)
	}

	qrReader := gozxingqrcode.NewQRCodeReader()
	result, err := qrReader.Decode(bmp, nil)
	if err != nil {
		return "", fmt.Errorf("‚ùå Failed to read QR Code: %v", err)
	}

	return result.GetText(), nil
}

func (qrs *QRCodeService) ReadQRCodeFromCID(qrCodeCID string) (map[string]interface{}, error) {
	fmt.Println("üìå Fetching and Decoding QR Code from IPFS CID:", qrCodeCID)

	// ‚úÖ ‡∏î‡∏∂‡∏á QR Code ‡∏à‡∏≤‡∏Å IPFS
	qrBase64, err := qrs.IPFSService.GetImageBase64FromIPFS(qrCodeCID)
	if err != nil {
		fmt.Println("‚ùå Failed to fetch QR Code from IPFS:", err)
		return nil, fmt.Errorf("Failed to retrieve QR Code")
	}

	// ‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ QR Code
	qrData, err := qrs.ReadQRCodeFromBase64(qrBase64)
	if err != nil {
		fmt.Println("‚ùå Failed to decode QR Code:", err)
		return nil, fmt.Errorf("Failed to decode QR Code")
	}

	var qrDataMap map[string]interface{}
	err = json.Unmarshal([]byte(qrData), &qrDataMap)
	if err != nil {
		fmt.Println("‚ùå Failed to parse QR Code JSON:", err)
		return nil, fmt.Errorf("Failed to parse QR Code JSON")
	}

	return qrDataMap, nil

}
