package services

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"strings"

	shell "github.com/ipfs/go-ipfs-api"
)

var IPFSServiceInstance = &IPFSService{}

// IPFSService ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å IPFS
type IPFSService struct {
	shell *shell.Shell
}

// NewIPFSService ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á IPFSService
func NewIPFSService() *IPFSService {
	return &IPFSService{
		shell: shell.NewShell("localhost:5001"), // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IPFS Daemon
	}
}

// UploadFile ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ CID
func (s *IPFSService) UploadFile(file io.Reader) (string, error) {
	fmt.Println("üìå Uploading file to IPFS...")

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFS Daemon ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !s.shell.IsUp() {
		fmt.Println("‚ùå IPFS Daemon is not running!")
		return "", fmt.Errorf("IPFS node is not available")
	}

	// ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô bytes
	buf := new(bytes.Buffer)
	_, err := io.Copy(buf, file)
	if err != nil {
		fmt.Println("‚ùå Error copying file content:", err)
		return "", fmt.Errorf("failed to read file content")
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
	cid, err := s.shell.Add(buf)
	if err != nil {
		fmt.Println("‚ùå Failed to upload to IPFS:", err)
		return "", fmt.Errorf("failed to upload to IPFS")
	}

	fmt.Println("‚úÖ File uploaded to IPFS with CID:", cid)
	return cid, nil
}

// GetFile ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å IPFS ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON String
func (s *IPFSService) GetFile(cid string) (string, error) {
	fmt.Println("üìå Retrieving file from IPFS... CID:", cid)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFS Daemon ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !s.shell.IsUp() {
		fmt.Println("‚ùå IPFS Daemon is not running!")
		return "", fmt.Errorf("IPFS node is not available")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å IPFS
	reader, err := s.shell.Cat(cid)
	if err != nil {
		fmt.Println("‚ùå Failed to retrieve file from IPFS:", err)
		return "", fmt.Errorf("failed to retrieve file from IPFS")
	}
	defer reader.Close()

	// ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reader
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		fmt.Println("‚ùå Error reading file content:", err)
		return "", fmt.Errorf("failed to read file content")
	}

	fmt.Println("‚úÖ File retrieved from IPFS successfully")
	return string(data), nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Base64 ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
func (s *IPFSService) UploadBase64File(base64Str string) (string, error) {
	fmt.Println("üìå Uploading Base64 file to IPFS...")

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Base64 String ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
	if base64Str == "" {
		fmt.Println("‚ùå Base64 string is empty")
		return "", fmt.Errorf("empty base64 string")
	}

	// ‚úÖ ‡∏ï‡∏±‡∏î `data:image/png;base64,` ‡∏´‡∏£‡∏∑‡∏≠ `data:application/pdf;base64,` ‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	if strings.Contains(base64Str, ",") {
		parts := strings.SplitN(base64Str, ",", 2)
		base64Str = parts[1] // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	}

	// ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° Padding (`=`) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ
	padding := len(base64Str) % 4
	if padding > 0 {
		base64Str += strings.Repeat("=", 4-padding)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Base64 ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡∏ï‡πå (‡πÉ‡∏ä‡πâ `RawStdEncoding` ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ padding)
	data, err := base64.RawStdEncoding.DecodeString(base64Str)
	if err != nil {
		fmt.Println("‚ùå Failed to decode Base64:", err)
		return "", fmt.Errorf("failed to decode Base64")
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Buffer
	buf := bytes.NewReader(data)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFS Daemon ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !s.shell.IsUp() {
		fmt.Println("‚ùå IPFS Daemon is not running!")
		return "", fmt.Errorf("IPFS node is not available")
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
	cid, err := s.shell.Add(buf)
	if err != nil {
		fmt.Println("‚ùå Failed to upload to IPFS:", err)
		return "", fmt.Errorf("failed to upload to IPFS")
	}

	fmt.Println("‚úÖ File uploaded to IPFS with CID:", cid)
	return cid, nil
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏°‡∏î‡∏¥‡∏ö + Shipping Address ‡∏Ç‡∏∂‡πâ‡∏ô IPFS
func (s *IPFSService) UploadMilkDataToIPFS(rawMilkData map[string]interface{}, shippingAddress map[string]interface{}) (string, error) {
	fmt.Println("üìå Uploading Milk Data to IPFS...")

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Raw Milk Data ‡πÅ‡∏•‡∏∞ Shipping Address
	data := map[string]interface{}{
		"rawMilkData":     rawMilkData,
		"shippingAddress": shippingAddress,
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô bytes
	jsonData, err := json.Marshal(data)
	if err != nil {
		fmt.Println("‚ùå Failed to encode JSON:", err)
		return "", fmt.Errorf("Failed to encode JSON: %v", err)
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Buffer
	buf := bytes.NewReader(jsonData)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFS Daemon ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if !s.shell.IsUp() {
		fmt.Println("‚ùå IPFS Daemon is not running!")
		return "", fmt.Errorf("IPFS node is not available")
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPFS
	cid, err := s.shell.Add(buf)
	if err != nil {
		fmt.Println("‚ùå Failed to upload Milk Data to IPFS:", err)
		return "", fmt.Errorf("Failed to upload to IPFS: %v", err)
	}

	fmt.Println("‚úÖ Milk Data uploaded to IPFS with CID:", cid)
	return cid, nil
}
