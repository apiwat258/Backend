package main

import (
	"fmt"
	"log"
	"os"

	"finalyearproject/Backend/api/controllers"
	"finalyearproject/Backend/api/routes"
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/joho/godotenv"
)

func main() {
	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `.env`
	err := godotenv.Load()
	if err != nil {
		log.Fatal("‚ùå Error loading .env file")
	}

	// ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Environment Variables
	fmt.Println("üìå DEBUG - BLOCKCHAIN_RPC_URL:", os.Getenv("BLOCKCHAIN_RPC_URL"))
	fmt.Println("üìå DEBUG - JWT_SECRET:", os.Getenv("JWT_SECRET"))

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Fiber App
	app := fiber.New()

	// ‚úÖ ‡πÅ‡∏Å‡πâ CORS Policy (‡∏•‡∏ö `/` ‡∏ó‡πâ‡∏≤‡∏¢ `AllowOrigins`)
	app.Use(cors.New(cors.Config{
		AllowOrigins:     "http://10.110.194.195:3000", // ‚úÖ ‡∏•‡∏ö `/` ‡∏ó‡πâ‡∏≤‡∏¢ URL
		AllowMethods:     "GET,POST,PUT,DELETE,PATCH,OPTIONS",
		AllowHeaders:     "Content-Type, Authorization",
		AllowCredentials: true, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Cookie ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
	}))

	// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	database.Connect()

	// ‚úÖ Migrate Tables
	database.DB.AutoMigrate(&models.User{}, &models.Farmer{}, &models.Certification{}, &models.Logistics{}, &models.Factory{}, &models.Retailer{})

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Blockchain Service
	err = services.InitBlockchainService()
	if err != nil {
		log.Fatalf("‚ùå Blockchain Service Error: %v", err)
	}
	fmt.Println("‚úÖ Blockchain Service Started Successfully!")

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô IPFS Service
	services.InitIPFSService()

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IPFSServiceInstance ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	if services.IPFSServiceInstance == nil {
		log.Fatal("‚ùå IPFS Service failed to initialize. Exiting...")
	}

	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ QRCodeServiceInstance ‡πÉ‡∏ä‡πâ IPFSServiceInstance ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	services.QRCodeServiceInstance = &services.QRCodeService{
		IPFSService: services.IPFSServiceInstance,
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á RawMilkController ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	rawMilkController := controllers.NewRawMilkController(
		database.DB,
		services.BlockchainServiceInstance,
		services.IPFSServiceInstance, // ‚úÖ ‡πÉ‡∏ä‡πâ instance ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
		services.QRCodeServiceInstance,
	)

	// ‚úÖ ‡∏™‡πà‡∏á `rawMilkController` ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ `SetupRoutes`
	routes.SetupRoutes(app, rawMilkController)

	// ‚úÖ ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå Static (Frontend)
	app.Static("/", "./frontend")

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
	log.Fatal(app.Listen(":8080"))
}
