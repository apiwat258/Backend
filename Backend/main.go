package main

import (
	"fmt"
	"log"
	"os"

	"finalyearproject/Backend/api/controllers"
	"finalyearproject/Backend/api/routes"
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/joho/godotenv"
)

func main() {
	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `.env`
	err := godotenv.Load()
	if err != nil {
		log.Fatal("‚ùå Error loading .env file")
	}

	// ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Environment Variables
	fmt.Println("üìå DEBUG - BLOCKCHAIN_RPC_URL:", os.Getenv("BLOCKCHAIN_RPC_URL"))
	fmt.Println("üìå DEBUG - JWT_SECRET:", os.Getenv("JWT_SECRET"))

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Fiber App
	app := fiber.New()

	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î CORS Origins ‚Üí ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Origin
	allowedOrigins := os.Getenv("ALLOWED_ORIGINS")
	if allowedOrigins == "" {
		// Default ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Local dev)
		allowedOrigins = "http://127.0.0.1:3000, http://localhost:3000"
	}
	fmt.Println("üìå DEBUG - ALLOWED_ORIGINS:", allowedOrigins)

	fmt.Println("üìå DEBUG - ALLOWED_ORIGINS:", allowedOrigins)

	app.Use(cors.New(cors.Config{
		AllowOrigins:     allowedOrigins, // ‚úÖ ENV
		AllowMethods:     "GET,POST,PUT,DELETE,PATCH,OPTIONS",
		AllowHeaders:     "Content-Type, Authorization",
		AllowCredentials: true,
	}))

	// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	database.Connect()

	// ‚úÖ Migrate Tables
	database.DB.AutoMigrate(&models.User{}, &models.Farmer{}, &models.Logistics{}, &models.Factory{}, &models.Retailer{})

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Blockchain Service
	err = services.InitBlockchainService()
	if err != nil {
		log.Fatalf("‚ùå Blockchain Service Error: %v", err)
	}
	fmt.Println("‚úÖ Blockchain Service Started Successfully!")

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô IPFS Service
	services.InitIPFSService()

	if services.IPFSServiceInstance == nil {
		log.Fatal("‚ùå IPFS Service failed to initialize. Exiting...")
	}

	services.QRCodeServiceInstance = &services.QRCodeService{
		IPFSService: services.IPFSServiceInstance,
	}

	rawMilkController := controllers.NewRawMilkController(
		database.DB,
		services.BlockchainServiceInstance,
		services.IPFSServiceInstance,
		services.QRCodeServiceInstance,
	)

	productController := controllers.NewProductController(
		database.DB,
		services.BlockchainServiceInstance,
		services.IPFSServiceInstance,
	)

	productLotController := controllers.NewProductLotController(
		database.DB,
		services.BlockchainServiceInstance,
		services.IPFSServiceInstance,
		services.QRCodeServiceInstance,
	)

	trackingController := controllers.NewTrackingController(
		database.DB,
		services.BlockchainServiceInstance,
		services.IPFSServiceInstance,
		services.QRCodeServiceInstance,
	)

	// ‚úÖ Setup Routes
	routes.SetupRoutes(app, rawMilkController, productController, productLotController, trackingController)

	// ‚úÖ Serve Static (Frontend)
	app.Static("/", "./frontend")

	// ‚úÖ Start Server
	log.Fatal(app.Listen(":8081"))
}
