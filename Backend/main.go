package main

import (
	"fmt"
	"log"
	"os"

	"finalyearproject/Backend/api/routes"
	"finalyearproject/Backend/database"
	"finalyearproject/Backend/models"
	"finalyearproject/Backend/services"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/joho/godotenv" // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env
)

func main() {
	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `.env` ‡∏Å‡πà‡∏≠‡∏ô
	err := godotenv.Load()
	if err != nil {
		log.Fatal("‚ùå Error loading .env file")
	}

	// ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `BLOCKCHAIN_RPC_URL` ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	fmt.Println("üìå DEBUG - BLOCKCHAIN_RPC_URL:", os.Getenv("BLOCKCHAIN_RPC_URL"))

	fmt.Println("JWT_SECRET:", os.Getenv("JWT_SECRET"))

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Fiber App
	app := fiber.New()

	// ‚úÖ ‡πÅ‡∏Å‡πâ CORS Policy
	app.Use(cors.New(cors.Config{
		AllowOrigins:     "http://10.110.194.195:3001", // ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ Origin ‡∏Ç‡∏≠‡∏á Frontend
		AllowMethods:     "GET,POST,PUT,DELETE,PATCH,OPTIONS",
		AllowHeaders:     "Content-Type, Authorization",
		AllowCredentials: true, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Cookie ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
	}))

	// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	database.Connect()

	// ‚úÖ Migrate Tables
	database.DB.AutoMigrate(&models.User{}, &models.Farmer{}, &models.Certification{}, &models.Logistics{}, &models.Factory{}, &models.Retailer{})

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Blockchain Service
	err = services.InitBlockchainService()
	if err != nil {
		log.Fatalf("‚ùå Blockchain Service Error: %v", err)
	}
	fmt.Println("‚úÖ Blockchain Service Started Successfully!")

	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	routes.SetupRoutes(app)

	// ‚úÖ ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå Static (Frontend)
	app.Static("/", "./frontend")

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
	log.Fatal(app.Listen(":8080"))
}
